{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"01301f7e6b141c50360ede2a2bb14d2111d6dd5f","modified":1519830045018},{"_id":"source/tip.html","hash":"a319f5bb92519dec5b956f9a77374498ee49fc36","modified":1517379738796},{"_id":"source/favicon.ico","hash":"362a981ba3d3bf465db4ff674c07784707a98e34","modified":1517620756185},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1517304840306},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1517304840306},{"_id":"themes/BlueLake/_config.yml","hash":"cf8e4332eb9a748ae3ecc193709d601b4191e929","modified":1517628676054},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1517304840307},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1517304840315},{"_id":"source/apple-touch-icon.png","hash":"4df42d8668664345e2ab50420da1cafea991a105","modified":1517453794481},{"_id":"source/_posts/GitHubPages + Hexo 搭建此博客.md","hash":"b3f68421aff21645df19194b3d271f5e26ee6280","modified":1518233354937},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517386778078},{"_id":"source/_posts/关于此Blog.md","hash":"6dc5b67d85b8e866a78c0717d3267171de15ed6d","modified":1517463877146},{"_id":"source/about/index.md","hash":"46ee6d8f2012f6076e5bc37c46918bb9ffa6172d","modified":1517378800647},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517304840301},{"_id":"themes/BlueLake/.git/FETCH_HEAD","hash":"43e963878ff7bf79f7905e99dedaf325a1350342","modified":1517628556360},{"_id":"themes/BlueLake/.git/ORIG_HEAD","hash":"c292cfc66fa6a171bcb9e25157b4ee8f09da6755","modified":1517628556374},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517304835227},{"_id":"themes/BlueLake/.git/config","hash":"cb5d8538f60766fe2a079a1894a586d81b258abf","modified":1517304840302},{"_id":"themes/BlueLake/.git/index","hash":"653bb10703645e475fd8fb9e9ddfae71d09a0bd3","modified":1517304840322},{"_id":"themes/BlueLake/.git/packed-refs","hash":"842a64dcd40e108353d1da6314a0c447e35b921d","modified":1517304840299},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1517304840307},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1517304840307},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1517304840308},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1517304840308},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1517304840308},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1517304840308},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1517304840308},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1517304840308},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1517304840314},{"_id":"themes/BlueLake/layout/base.jade","hash":"2e65a06a499fbb67c72f8345d71222e40e9ef523","modified":1517304840314},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1517304840314},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1517304840314},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1517304840314},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1517304840315},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1517304840315},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1517304840315},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1517304840317},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517304835227},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517304835229},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1517304835227},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517304835229},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517304835228},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"8a631319198d08f5bd81a3eaf66c6a503a986403","modified":1517304840301},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517304835227},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1517304840311},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1517304840311},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1517304840311},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1517304840311},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1517304840312},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1517304840312},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1517304840312},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1517304840313},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1517304840313},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1517304840313},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1517304840313},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1517304840316},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1517304840317},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1517304840318},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1517304840318},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1517304840319},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1517304840319},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1517304840321},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1517304840321},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1517304840321},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1517304840320},{"_id":"themes/BlueLake/.git/objects/pack/pack-b661a4a342e3a6d2919678428fe7a1af1916347f.idx","hash":"7a6c8d64aac4c8f93117a85d94e8099384ca40cc","modified":1517304840292},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"c292cfc66fa6a171bcb9e25157b4ee8f09da6755","modified":1517304840301},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"8a631319198d08f5bd81a3eaf66c6a503a986403","modified":1517304840302},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517304840300},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"8a631319198d08f5bd81a3eaf66c6a503a986403","modified":1517304840300},{"_id":"themes/BlueLake/.git/objects/pack/pack-b661a4a342e3a6d2919678428fe7a1af1916347f.pack","hash":"a8f391475221e019e87de24e007aa676b5619486","modified":1517304840291},{"_id":"public/tip.html","hash":"63ed5c7a527483a94904f6eb8b84baa6d47c0aa7","modified":1519830076321},{"_id":"public/about/index.html","hash":"04d2e82ea84aa2769aee2d109723390794147e1a","modified":1519830076321},{"_id":"public/2018/01/31/关于此Blog/index.html","hash":"342898765d399a8c683e301990c999d9f650c47c","modified":1519830076321},{"_id":"public/archives/index.html","hash":"347d74194249047ecbaa23f91c2ae229b5498736","modified":1519830076322},{"_id":"public/archives/2018/index.html","hash":"347d74194249047ecbaa23f91c2ae229b5498736","modified":1519830076322},{"_id":"public/archives/2018/01/index.html","hash":"5582bc75a6b79a884f15dc6bae32d9a59de8aced","modified":1519830076322},{"_id":"public/archives/2018/02/index.html","hash":"b678046d575fb8f3c64a2466f2273dc68ba87b47","modified":1519830076322},{"_id":"public/index.html","hash":"929b4ab840b3583e1f11b481747ff60abc176c0d","modified":1519830076322},{"_id":"public/tags/About-Blog/index.html","hash":"d43bfb95c208baa1e0edae38d457d2a7498b7ff4","modified":1519830076322},{"_id":"public/tags/GithubPages/index.html","hash":"6eb2ecea5d9a5236df9a8bb62542864827dc1696","modified":1519830076322},{"_id":"public/2018/02/05/GitHubPages + Hexo 搭建此博客/index.html","hash":"ca94e1106042d27ba6e9eae8bc1f9d799208d25b","modified":1519830076322},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1517838456145},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1517838456145},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1517838456145},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1517838456145},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1517838456145},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1517838456145},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1517838456430},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1517838456432},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1517838456432},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1517838456433},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1517838456433},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1517838456433},{"_id":"source/_posts/Mac 下使用 Apache 服务器.md","hash":"60acc5b87f60569309a0beeeeb07a41b8a12a646","modified":1520127328749},{"_id":"public/tags/Apache/index.html","hash":"15616bb390d1b9b96fca825ea8839d5c2de35592","modified":1519830076323},{"_id":"public/2018/02/25/Mac 下使用 Apache 服务器/index.html","hash":"e0563ba7d5978960f01ae629d2e0be001147f9c5","modified":1520127359248}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>","source":"tip.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>","date":"2018-02-03T03:27:46.352Z","updated":"2018-01-31T06:22:18.796Z","path":"tip.html","title":"","comments":1,"layout":"page","_id":"cjda9trhd000005cld6vd34m9","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>"},{"_content":"\n最喜欢的数字是10\n不是要追求十全十美\n而是相信完美并不存在\n所以要保持一切从零开始的心态\n和敢于从零开始的勇气\n","source":"about/index.md","raw":"\n最喜欢的数字是10\n不是要追求十全十美\n而是相信完美并不存在\n所以要保持一切从零开始的心态\n和敢于从零开始的勇气\n","date":"2018-02-05T08:48:03.423Z","updated":"2018-01-31T06:06:40.647Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjda9trht000205clph87zcmv","content":"<p>最喜欢的数字是10<br>不是要追求十全十美<br>而是相信完美并不存在<br>所以要保持一切从零开始的心态<br>和敢于从零开始的勇气</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最喜欢的数字是10<br>不是要追求十全十美<br>而是相信完美并不存在<br>所以要保持一切从零开始的心态<br>和敢于从零开始的勇气</p>\n"}],"Post":[{"title":"GithubPages + Hexo 搭建博客","date":"2018-02-05T13:22:00.000Z","_content":"\n\n\n## GitHubPages是什么？\n\nGitHubPages 是 GitHub 公司为 [github](https://github.com) 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。\n\n比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  [uniapp10/hexo-theme-BlueLake](https://github.com/uniapp10/hexo-theme-BlueLake) ，打开后你会看到：\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png)\n\n\n\n眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 [uniapp10/hexo-theme-BlueLake](http://unicoinapp.top/hexo-theme-BlueLake/) ，打开后就变成：\n\n\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png)\n\n\n\n是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。\n\n作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 [GitHubPages](https://pages.github.com/) 。\n\n## 有什么限制？\n\n\n\n1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。\n\n2 每月访问 GitHubPages 的带宽上限为 100GB。\n\n3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。\n\n## 如何使用？\n\n#### 找到 GitHubPages\n\nGitHubPages 入口按照下面的步骤可以找到：\n\n1 点击工程设置：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png)\n\n---\n\n2 下滑到 GitHub Pages，可以看到其超链接：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages.png)\n\n---\n\n3 下滑到底部，可以看到官方推荐搭建 Blog 的 [Jekyll框架](https://jekyllrb.com/docs/quickstart/) :\n\n\n\n![GitHub官方推荐Blog框架](http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png)\n\n Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 [hexo框架](https://hexo.io/zh-cn/docs/index.html) 。\n\n#### 创建工程\n\n\n\n相信开发者都拥有自己的 [github](https://github.com/) 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。\n\n登录 gitHub 账号，新建工程：\n\n![新建GitHub工程](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png)\n\n工程名称有严格的限制，具体命名要求可以在 [官网文档](https://help.github.com/articles/user-organization-and-project-pages/) 找到。\n\n![命名要求](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png)\n\n#### 安装Hexo\n\n\n\n安装步骤可以参照：[hexo安装](https://hexo.io/zh-cn/docs/index.html)\n\n#### 选取使用的主题\n\n[挑选主题](https://hexo.io/themes/) ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 [BlueLake](https://github.com/chaooo/hexo-theme-BlueLake) 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。\n\n#### 为工程配置域名\n\n\n\n首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。\n\n购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：\n\n![解析域名](http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png)\n\n添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。\n\n配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png)\n\n我填写的内容：\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png)\n\n\n\n\n\n一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。\n\n#### 发表新文章\n\n依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 `/source/_posts/` 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。\n\n## 不可缺少的能力\n\n一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：\n\n1 [ MarkDown 语法](http://wowubuntu.com/markdown/#em) 。\n\n2 图片存放到云上。\n\n如果将配图放在我们本身网站中，有两个缺点：\n\n​\t2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; \n\n​\t 2.2 引用和管理不方便，缺少配图管理工具。\n\n如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。\n\n写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。\n\n然后使用 hexo 命令部署到服务器上：\n\n```\nhexo g -d\n```\n\n最后使用 Git 命令提交到远程仓库，大功告成！\n\n不熟悉 hexo 命令的小伙伴，可以在终端使用 `hexo help` 命令获取对 hexo 命令参数的详细解释：\n\n```\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n```\n\n这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？\n\n步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！","source":"_posts/GitHubPages + Hexo 搭建此博客.md","raw":"---\ntitle: GithubPages + Hexo 搭建博客\ndate: 2018-02-05 21:22:00\ntags: GithubPages\n---\n\n\n\n## GitHubPages是什么？\n\nGitHubPages 是 GitHub 公司为 [github](https://github.com) 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。\n\n比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  [uniapp10/hexo-theme-BlueLake](https://github.com/uniapp10/hexo-theme-BlueLake) ，打开后你会看到：\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png)\n\n\n\n眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 [uniapp10/hexo-theme-BlueLake](http://unicoinapp.top/hexo-theme-BlueLake/) ，打开后就变成：\n\n\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png)\n\n\n\n是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。\n\n作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 [GitHubPages](https://pages.github.com/) 。\n\n## 有什么限制？\n\n\n\n1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。\n\n2 每月访问 GitHubPages 的带宽上限为 100GB。\n\n3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。\n\n## 如何使用？\n\n#### 找到 GitHubPages\n\nGitHubPages 入口按照下面的步骤可以找到：\n\n1 点击工程设置：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png)\n\n---\n\n2 下滑到 GitHub Pages，可以看到其超链接：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages.png)\n\n---\n\n3 下滑到底部，可以看到官方推荐搭建 Blog 的 [Jekyll框架](https://jekyllrb.com/docs/quickstart/) :\n\n\n\n![GitHub官方推荐Blog框架](http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png)\n\n Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 [hexo框架](https://hexo.io/zh-cn/docs/index.html) 。\n\n#### 创建工程\n\n\n\n相信开发者都拥有自己的 [github](https://github.com/) 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。\n\n登录 gitHub 账号，新建工程：\n\n![新建GitHub工程](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png)\n\n工程名称有严格的限制，具体命名要求可以在 [官网文档](https://help.github.com/articles/user-organization-and-project-pages/) 找到。\n\n![命名要求](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png)\n\n#### 安装Hexo\n\n\n\n安装步骤可以参照：[hexo安装](https://hexo.io/zh-cn/docs/index.html)\n\n#### 选取使用的主题\n\n[挑选主题](https://hexo.io/themes/) ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 [BlueLake](https://github.com/chaooo/hexo-theme-BlueLake) 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。\n\n#### 为工程配置域名\n\n\n\n首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。\n\n购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：\n\n![解析域名](http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png)\n\n添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。\n\n配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png)\n\n我填写的内容：\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png)\n\n\n\n\n\n一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。\n\n#### 发表新文章\n\n依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 `/source/_posts/` 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。\n\n## 不可缺少的能力\n\n一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：\n\n1 [ MarkDown 语法](http://wowubuntu.com/markdown/#em) 。\n\n2 图片存放到云上。\n\n如果将配图放在我们本身网站中，有两个缺点：\n\n​\t2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; \n\n​\t 2.2 引用和管理不方便，缺少配图管理工具。\n\n如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。\n\n写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。\n\n然后使用 hexo 命令部署到服务器上：\n\n```\nhexo g -d\n```\n\n最后使用 Git 命令提交到远程仓库，大功告成！\n\n不熟悉 hexo 命令的小伙伴，可以在终端使用 `hexo help` 命令获取对 hexo 命令参数的详细解释：\n\n```\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n```\n\n这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？\n\n步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！","slug":"GitHubPages + Hexo 搭建此博客","published":1,"updated":"2018-02-10T03:29:14.937Z","_id":"cjda9trhq000105cl4lwt6sgx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"GitHubPages是什么？\"><a href=\"#GitHubPages是什么？\" class=\"headerlink\" title=\"GitHubPages是什么？\"></a>GitHubPages是什么？</h2><p>GitHubPages 是 GitHub 公司为 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a> 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。</p>\n<p>比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  <a href=\"https://github.com/uniapp10/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">uniapp10/hexo-theme-BlueLake</a> ，打开后你会看到：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png\" alt=\"ProjectPages\"></p>\n<p>眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 <a href=\"http://unicoinapp.top/hexo-theme-BlueLake/\">uniapp10/hexo-theme-BlueLake</a> ，打开后就变成：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png\" alt=\"ProjectPages\"></p>\n<p>是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。</p>\n<p>作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHubPages</a> 。</p>\n<h2 id=\"有什么限制？\"><a href=\"#有什么限制？\" class=\"headerlink\" title=\"有什么限制？\"></a>有什么限制？</h2><p>1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。</p>\n<p>2 每月访问 GitHubPages 的带宽上限为 100GB。</p>\n<p>3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><h4 id=\"找到-GitHubPages\"><a href=\"#找到-GitHubPages\" class=\"headerlink\" title=\"找到 GitHubPages\"></a>找到 GitHubPages</h4><p>GitHubPages 入口按照下面的步骤可以找到：</p>\n<p>1 点击工程设置：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>2 下滑到 GitHub Pages，可以看到其超链接：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>3 下滑到底部，可以看到官方推荐搭建 Blog 的 <a href=\"https://jekyllrb.com/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">Jekyll框架</a> :</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png\" alt=\"GitHub官方推荐Blog框架\"></p>\n<p> Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 <a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo框架</a> 。</p>\n<h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><p>相信开发者都拥有自己的 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a> 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。</p>\n<p>登录 gitHub 账号，新建工程：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png\" alt=\"新建GitHub工程\"></p>\n<p>工程名称有严格的限制，具体命名要求可以在 <a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">官网文档</a> 找到。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png\" alt=\"命名要求\"></p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>安装步骤可以参照：<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo安装</a></p>\n<h4 id=\"选取使用的主题\"><a href=\"#选取使用的主题\" class=\"headerlink\" title=\"选取使用的主题\"></a>选取使用的主题</h4><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">挑选主题</a> ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 <a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake</a> 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。</p>\n<h4 id=\"为工程配置域名\"><a href=\"#为工程配置域名\" class=\"headerlink\" title=\"为工程配置域名\"></a>为工程配置域名</h4><p>首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。</p>\n<p>购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png\" alt=\"解析域名\"></p>\n<p>添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。</p>\n<p>配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png\" alt=\"CNAME命名\"></p>\n<p>我填写的内容：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png\" alt=\"CNAME命名\"></p>\n<p>一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。</p>\n<h4 id=\"发表新文章\"><a href=\"#发表新文章\" class=\"headerlink\" title=\"发表新文章\"></a>发表新文章</h4><p>依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 <code>/source/_posts/</code> 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。</p>\n<h2 id=\"不可缺少的能力\"><a href=\"#不可缺少的能力\" class=\"headerlink\" title=\"不可缺少的能力\"></a>不可缺少的能力</h2><p>一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：</p>\n<p>1 <a href=\"http://wowubuntu.com/markdown/#em\" target=\"_blank\" rel=\"noopener\"> MarkDown 语法</a> 。</p>\n<p>2 图片存放到云上。</p>\n<p>如果将配图放在我们本身网站中，有两个缺点：</p>\n<p>​    2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; </p>\n<p>​     2.2 引用和管理不方便，缺少配图管理工具。</p>\n<p>如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。</p>\n<p>写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。</p>\n<p>然后使用 hexo 命令部署到服务器上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<p>最后使用 Git 命令提交到远程仓库，大功告成！</p>\n<p>不熟悉 hexo 命令的小伙伴，可以在终端使用 <code>hexo help</code> 命令获取对 hexo 命令参数的详细解释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  help     Get help on a command.</span><br><span class=\"line\">  init     Create a new Hexo folder.</span><br><span class=\"line\">  version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br></pre></td></tr></table></figure>\n<p>这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？</p>\n<p>步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GitHubPages是什么？\"><a href=\"#GitHubPages是什么？\" class=\"headerlink\" title=\"GitHubPages是什么？\"></a>GitHubPages是什么？</h2><p>GitHubPages 是 GitHub 公司为 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a> 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。</p>\n<p>比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  <a href=\"https://github.com/uniapp10/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">uniapp10/hexo-theme-BlueLake</a> ，打开后你会看到：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png\" alt=\"ProjectPages\"></p>\n<p>眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 <a href=\"http://unicoinapp.top/hexo-theme-BlueLake/\">uniapp10/hexo-theme-BlueLake</a> ，打开后就变成：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png\" alt=\"ProjectPages\"></p>\n<p>是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。</p>\n<p>作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHubPages</a> 。</p>\n<h2 id=\"有什么限制？\"><a href=\"#有什么限制？\" class=\"headerlink\" title=\"有什么限制？\"></a>有什么限制？</h2><p>1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。</p>\n<p>2 每月访问 GitHubPages 的带宽上限为 100GB。</p>\n<p>3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><h4 id=\"找到-GitHubPages\"><a href=\"#找到-GitHubPages\" class=\"headerlink\" title=\"找到 GitHubPages\"></a>找到 GitHubPages</h4><p>GitHubPages 入口按照下面的步骤可以找到：</p>\n<p>1 点击工程设置：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>2 下滑到 GitHub Pages，可以看到其超链接：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>3 下滑到底部，可以看到官方推荐搭建 Blog 的 <a href=\"https://jekyllrb.com/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">Jekyll框架</a> :</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png\" alt=\"GitHub官方推荐Blog框架\"></p>\n<p> Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 <a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo框架</a> 。</p>\n<h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><p>相信开发者都拥有自己的 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a> 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。</p>\n<p>登录 gitHub 账号，新建工程：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png\" alt=\"新建GitHub工程\"></p>\n<p>工程名称有严格的限制，具体命名要求可以在 <a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">官网文档</a> 找到。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png\" alt=\"命名要求\"></p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>安装步骤可以参照：<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo安装</a></p>\n<h4 id=\"选取使用的主题\"><a href=\"#选取使用的主题\" class=\"headerlink\" title=\"选取使用的主题\"></a>选取使用的主题</h4><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">挑选主题</a> ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 <a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake</a> 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。</p>\n<h4 id=\"为工程配置域名\"><a href=\"#为工程配置域名\" class=\"headerlink\" title=\"为工程配置域名\"></a>为工程配置域名</h4><p>首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。</p>\n<p>购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png\" alt=\"解析域名\"></p>\n<p>添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。</p>\n<p>配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png\" alt=\"CNAME命名\"></p>\n<p>我填写的内容：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png\" alt=\"CNAME命名\"></p>\n<p>一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。</p>\n<h4 id=\"发表新文章\"><a href=\"#发表新文章\" class=\"headerlink\" title=\"发表新文章\"></a>发表新文章</h4><p>依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 <code>/source/_posts/</code> 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。</p>\n<h2 id=\"不可缺少的能力\"><a href=\"#不可缺少的能力\" class=\"headerlink\" title=\"不可缺少的能力\"></a>不可缺少的能力</h2><p>一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：</p>\n<p>1 <a href=\"http://wowubuntu.com/markdown/#em\" target=\"_blank\" rel=\"noopener\"> MarkDown 语法</a> 。</p>\n<p>2 图片存放到云上。</p>\n<p>如果将配图放在我们本身网站中，有两个缺点：</p>\n<p>​    2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; </p>\n<p>​     2.2 引用和管理不方便，缺少配图管理工具。</p>\n<p>如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。</p>\n<p>写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。</p>\n<p>然后使用 hexo 命令部署到服务器上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<p>最后使用 Git 命令提交到远程仓库，大功告成！</p>\n<p>不熟悉 hexo 命令的小伙伴，可以在终端使用 <code>hexo help</code> 命令获取对 hexo 命令参数的详细解释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  help     Get help on a command.</span><br><span class=\"line\">  init     Create a new Hexo folder.</span><br><span class=\"line\">  version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br></pre></td></tr></table></figure>\n<p>这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？</p>\n<p>步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！</p>\n"},{"title":"关于此Blog","date":"2018-01-31T07:07:49.000Z","_content":"\n互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。\n\n而我，是一名猿类成员。 \n\n自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。\n\n一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。\n\n丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！\n\n![心若在，梦就在](http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg)","source":"_posts/关于此Blog.md","raw":"---\ntitle: 关于此Blog\ndate: 2018-01-31 15:07:49\ntags: About Blog\n---\n\n互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。\n\n而我，是一名猿类成员。 \n\n自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。\n\n一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。\n\n丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！\n\n![心若在，梦就在](http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg)","slug":"关于此Blog","published":1,"updated":"2018-02-01T05:44:37.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjda9trhu000305clwjuqwqfj","content":"<p>互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。</p>\n<p>而我，是一名猿类成员。 </p>\n<p>自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。</p>\n<p>一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。</p>\n<p>丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg\" alt=\"心若在，梦就在\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。</p>\n<p>而我，是一名猿类成员。 </p>\n<p>自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。</p>\n<p>一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。</p>\n<p>丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg\" alt=\"心若在，梦就在\"></p>\n"},{"title":"小白 Mac下使用 Apache 服务器","date":"2018-02-25T12:37:00.000Z","_content":"\n作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。\n\n#### 什么是服务器？\n\n顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。\n\n#### 一个完整的网络请求需要哪些过程？\n\n我们在浏览器输入 `http://www.baidu.com` 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：\n\n###### 1 解析域名，获取百度主机地址；\n\n互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 `192.168.xxx.xxx` 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 `baidu.com` 比起 `138.168.0.1 ` 记忆的难度就会大大降低。\n\n按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。\n\n######2 与百度主机建立连接；\n\n解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。\n\n######3 通过协议获取服务；\n\n建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。\n\nMac 机器下，解析域名缓存的文件为 `/private/etc/hosts` ，打开文件，能看到 IP 和域名相信的对应关系：\n\n```\n216.58.200.192\tandroid.com\n216.58.200.192\twww.android.com\n216.58.200.192\ta.android.com\n216.58.200.192\tconnectivitycheck.android.com\n216.58.200.192\td.android.com\n...\n```\n\n我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。\n\n在浏览器中输入的内容除了 `baidu.com` 的域名外，还有 `http://www` 。其中 http 标识使用的协议，`www` 标识访问主机上的文件位置。\n\n####Apache 服务器的优点？\n\nMac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。\n\n####配置 Apache 服务器\n\nMac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 `/private/etc/apache2` 。\n\n打开配置文件 `httpd.conf` ，去掉 `Include /private/etc/apache2/extra/httpd-vhosts.conf` 前的 # ， 启动虚拟机服务。添加监听端口， 比如 `8002`：\n\n```\nListen 8002\n```\n\n\n\n打开文件 `/private/etc/apache2/extra/httpd-vhosts.conf` ，可以看到默认打开了 80 端口。我们可以手动添加和 `httpd-vhosts.conf` 文件中相匹配的监听端口 8002， 添加如下代码：\n\n```\n<VirtualHost *:8002>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"具体目录\"\n    ServerName mysite\n    ErrorLog \"/private/var/log/apache2/dummy-host2.example.com-error_log\"\n    CustomLog \"/private/var/log/apache2/dummy-host2.example.com-access_log\" common\n    <Directory />\n                Options Indexes FollowSymLinks MultiViews\n                AllowOverride None\n                Order deny,allow\n                Allow from all\n    </Directory>\n</VirtualHost>\n```\n\n如果出现无法修改文件的提示，参考下面的修改文件权限。\n\n####修改文件权限\n\n文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —>显示简介—>共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。\n\n当然也可以通过命令行的方式修改。在终端输入更改文件的命令 `chmod u+w 文件路径`  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 [Linux命令:修改文件权限命令chmod、chgrp、chown详解](http://www.cnblogs.com/Berryxiong/p/6193866.html) 。\n\n####启动 Apache 服务器\n\n在终端输入 `sudo apachectl restart` 重新启动 Apache 服务器，在浏览器地址栏输入 `http://127.0.0.1:8002` 就能看到我们设定好的 `具体目录` 下的文件详情。\n\n根据前面讲述的原理，我们可以在` /private/etc/hosts` 文件中添加域名解析 `127.0.0.1\tmysite` ，然后在浏览器地址栏输入`http://mysite:8002` 后能够看到同样的效果。\n\n#### 总结\n\n全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。\n\n\n\n","source":"_posts/Mac 下使用 Apache 服务器.md","raw":"---\ntitle: 小白 Mac下使用 Apache 服务器\ndate: 2018-02-25 20:37:00\ntags: Apache\n---\n\n作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。\n\n#### 什么是服务器？\n\n顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。\n\n#### 一个完整的网络请求需要哪些过程？\n\n我们在浏览器输入 `http://www.baidu.com` 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：\n\n###### 1 解析域名，获取百度主机地址；\n\n互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 `192.168.xxx.xxx` 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 `baidu.com` 比起 `138.168.0.1 ` 记忆的难度就会大大降低。\n\n按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。\n\n######2 与百度主机建立连接；\n\n解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。\n\n######3 通过协议获取服务；\n\n建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。\n\nMac 机器下，解析域名缓存的文件为 `/private/etc/hosts` ，打开文件，能看到 IP 和域名相信的对应关系：\n\n```\n216.58.200.192\tandroid.com\n216.58.200.192\twww.android.com\n216.58.200.192\ta.android.com\n216.58.200.192\tconnectivitycheck.android.com\n216.58.200.192\td.android.com\n...\n```\n\n我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。\n\n在浏览器中输入的内容除了 `baidu.com` 的域名外，还有 `http://www` 。其中 http 标识使用的协议，`www` 标识访问主机上的文件位置。\n\n####Apache 服务器的优点？\n\nMac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。\n\n####配置 Apache 服务器\n\nMac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 `/private/etc/apache2` 。\n\n打开配置文件 `httpd.conf` ，去掉 `Include /private/etc/apache2/extra/httpd-vhosts.conf` 前的 # ， 启动虚拟机服务。添加监听端口， 比如 `8002`：\n\n```\nListen 8002\n```\n\n\n\n打开文件 `/private/etc/apache2/extra/httpd-vhosts.conf` ，可以看到默认打开了 80 端口。我们可以手动添加和 `httpd-vhosts.conf` 文件中相匹配的监听端口 8002， 添加如下代码：\n\n```\n<VirtualHost *:8002>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"具体目录\"\n    ServerName mysite\n    ErrorLog \"/private/var/log/apache2/dummy-host2.example.com-error_log\"\n    CustomLog \"/private/var/log/apache2/dummy-host2.example.com-access_log\" common\n    <Directory />\n                Options Indexes FollowSymLinks MultiViews\n                AllowOverride None\n                Order deny,allow\n                Allow from all\n    </Directory>\n</VirtualHost>\n```\n\n如果出现无法修改文件的提示，参考下面的修改文件权限。\n\n####修改文件权限\n\n文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —>显示简介—>共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。\n\n当然也可以通过命令行的方式修改。在终端输入更改文件的命令 `chmod u+w 文件路径`  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 [Linux命令:修改文件权限命令chmod、chgrp、chown详解](http://www.cnblogs.com/Berryxiong/p/6193866.html) 。\n\n####启动 Apache 服务器\n\n在终端输入 `sudo apachectl restart` 重新启动 Apache 服务器，在浏览器地址栏输入 `http://127.0.0.1:8002` 就能看到我们设定好的 `具体目录` 下的文件详情。\n\n根据前面讲述的原理，我们可以在` /private/etc/hosts` 文件中添加域名解析 `127.0.0.1\tmysite` ，然后在浏览器地址栏输入`http://mysite:8002` 后能够看到同样的效果。\n\n#### 总结\n\n全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。\n\n\n\n","slug":"Mac 下使用 Apache 服务器","published":1,"updated":"2018-03-04T01:35:28.749Z","_id":"cje77l3gd000007clwyn7d9vr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。</p>\n<h4 id=\"什么是服务器？\"><a href=\"#什么是服务器？\" class=\"headerlink\" title=\"什么是服务器？\"></a>什么是服务器？</h4><p>顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。</p>\n<h4 id=\"一个完整的网络请求需要哪些过程？\"><a href=\"#一个完整的网络请求需要哪些过程？\" class=\"headerlink\" title=\"一个完整的网络请求需要哪些过程？\"></a>一个完整的网络请求需要哪些过程？</h4><p>我们在浏览器输入 <code>http://www.baidu.com</code> 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：</p>\n<h6 id=\"1-解析域名，获取百度主机地址；\"><a href=\"#1-解析域名，获取百度主机地址；\" class=\"headerlink\" title=\"1 解析域名，获取百度主机地址；\"></a>1 解析域名，获取百度主机地址；</h6><p>互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 <code>192.168.xxx.xxx</code> 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 <code>baidu.com</code> 比起 <code>138.168.0.1</code> 记忆的难度就会大大降低。</p>\n<p>按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。</p>\n<p>######2 与百度主机建立连接；</p>\n<p>解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。</p>\n<p>######3 通过协议获取服务；</p>\n<p>建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。</p>\n<p>Mac 机器下，解析域名缓存的文件为 <code>/private/etc/hosts</code> ，打开文件，能看到 IP 和域名相信的对应关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">216.58.200.192\tandroid.com</span><br><span class=\"line\">216.58.200.192\twww.android.com</span><br><span class=\"line\">216.58.200.192\ta.android.com</span><br><span class=\"line\">216.58.200.192\tconnectivitycheck.android.com</span><br><span class=\"line\">216.58.200.192\td.android.com</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。</p>\n<p>在浏览器中输入的内容除了 <code>baidu.com</code> 的域名外，还有 <code>http://www</code> 。其中 http 标识使用的协议，<code>www</code> 标识访问主机上的文件位置。</p>\n<p>####Apache 服务器的优点？</p>\n<p>Mac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。</p>\n<p>####配置 Apache 服务器</p>\n<p>Mac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 <code>/private/etc/apache2</code> 。</p>\n<p>打开配置文件 <code>httpd.conf</code> ，去掉 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code> 前的 # ， 启动虚拟机服务。添加监听端口， 比如 <code>8002</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8002</span><br></pre></td></tr></table></figure>\n<p>打开文件 <code>/private/etc/apache2/extra/httpd-vhosts.conf</code> ，可以看到默认打开了 80 端口。我们可以手动添加和 <code>httpd-vhosts.conf</code> 文件中相匹配的监听端口 8002， 添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8002&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class=\"line\">    DocumentRoot &quot;具体目录&quot;</span><br><span class=\"line\">    ServerName mysite</span><br><span class=\"line\">    ErrorLog &quot;/private/var/log/apache2/dummy-host2.example.com-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;/private/var/log/apache2/dummy-host2.example.com-access_log&quot; common</span><br><span class=\"line\">    &lt;Directory /&gt;</span><br><span class=\"line\">                Options Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">                AllowOverride None</span><br><span class=\"line\">                Order deny,allow</span><br><span class=\"line\">                Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>如果出现无法修改文件的提示，参考下面的修改文件权限。</p>\n<p>####修改文件权限</p>\n<p>文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —&gt;显示简介—&gt;共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。</p>\n<p>当然也可以通过命令行的方式修改。在终端输入更改文件的命令 <code>chmod u+w 文件路径</code>  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 <a href=\"http://www.cnblogs.com/Berryxiong/p/6193866.html\" target=\"_blank\" rel=\"noopener\">Linux命令:修改文件权限命令chmod、chgrp、chown详解</a> 。</p>\n<p>####启动 Apache 服务器</p>\n<p>在终端输入 <code>sudo apachectl restart</code> 重新启动 Apache 服务器，在浏览器地址栏输入 <code>http://127.0.0.1:8002</code> 就能看到我们设定好的 <code>具体目录</code> 下的文件详情。</p>\n<p>根据前面讲述的原理，我们可以在<code>/private/etc/hosts</code> 文件中添加域名解析 <code>127.0.0.1    mysite</code> ，然后在浏览器地址栏输入<code>http://mysite:8002</code> 后能够看到同样的效果。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。</p>\n<h4 id=\"什么是服务器？\"><a href=\"#什么是服务器？\" class=\"headerlink\" title=\"什么是服务器？\"></a>什么是服务器？</h4><p>顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。</p>\n<h4 id=\"一个完整的网络请求需要哪些过程？\"><a href=\"#一个完整的网络请求需要哪些过程？\" class=\"headerlink\" title=\"一个完整的网络请求需要哪些过程？\"></a>一个完整的网络请求需要哪些过程？</h4><p>我们在浏览器输入 <code>http://www.baidu.com</code> 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：</p>\n<h6 id=\"1-解析域名，获取百度主机地址；\"><a href=\"#1-解析域名，获取百度主机地址；\" class=\"headerlink\" title=\"1 解析域名，获取百度主机地址；\"></a>1 解析域名，获取百度主机地址；</h6><p>互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 <code>192.168.xxx.xxx</code> 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 <code>baidu.com</code> 比起 <code>138.168.0.1</code> 记忆的难度就会大大降低。</p>\n<p>按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。</p>\n<p>######2 与百度主机建立连接；</p>\n<p>解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。</p>\n<p>######3 通过协议获取服务；</p>\n<p>建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。</p>\n<p>Mac 机器下，解析域名缓存的文件为 <code>/private/etc/hosts</code> ，打开文件，能看到 IP 和域名相信的对应关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">216.58.200.192\tandroid.com</span><br><span class=\"line\">216.58.200.192\twww.android.com</span><br><span class=\"line\">216.58.200.192\ta.android.com</span><br><span class=\"line\">216.58.200.192\tconnectivitycheck.android.com</span><br><span class=\"line\">216.58.200.192\td.android.com</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。</p>\n<p>在浏览器中输入的内容除了 <code>baidu.com</code> 的域名外，还有 <code>http://www</code> 。其中 http 标识使用的协议，<code>www</code> 标识访问主机上的文件位置。</p>\n<p>####Apache 服务器的优点？</p>\n<p>Mac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。</p>\n<p>####配置 Apache 服务器</p>\n<p>Mac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 <code>/private/etc/apache2</code> 。</p>\n<p>打开配置文件 <code>httpd.conf</code> ，去掉 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code> 前的 # ， 启动虚拟机服务。添加监听端口， 比如 <code>8002</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8002</span><br></pre></td></tr></table></figure>\n<p>打开文件 <code>/private/etc/apache2/extra/httpd-vhosts.conf</code> ，可以看到默认打开了 80 端口。我们可以手动添加和 <code>httpd-vhosts.conf</code> 文件中相匹配的监听端口 8002， 添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8002&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class=\"line\">    DocumentRoot &quot;具体目录&quot;</span><br><span class=\"line\">    ServerName mysite</span><br><span class=\"line\">    ErrorLog &quot;/private/var/log/apache2/dummy-host2.example.com-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;/private/var/log/apache2/dummy-host2.example.com-access_log&quot; common</span><br><span class=\"line\">    &lt;Directory /&gt;</span><br><span class=\"line\">                Options Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">                AllowOverride None</span><br><span class=\"line\">                Order deny,allow</span><br><span class=\"line\">                Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>如果出现无法修改文件的提示，参考下面的修改文件权限。</p>\n<p>####修改文件权限</p>\n<p>文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —&gt;显示简介—&gt;共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。</p>\n<p>当然也可以通过命令行的方式修改。在终端输入更改文件的命令 <code>chmod u+w 文件路径</code>  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 <a href=\"http://www.cnblogs.com/Berryxiong/p/6193866.html\" target=\"_blank\" rel=\"noopener\">Linux命令:修改文件权限命令chmod、chgrp、chown详解</a> 。</p>\n<p>####启动 Apache 服务器</p>\n<p>在终端输入 <code>sudo apachectl restart</code> 重新启动 Apache 服务器，在浏览器地址栏输入 <code>http://127.0.0.1:8002</code> 就能看到我们设定好的 <code>具体目录</code> 下的文件详情。</p>\n<p>根据前面讲述的原理，我们可以在<code>/private/etc/hosts</code> 文件中添加域名解析 <code>127.0.0.1    mysite</code> ，然后在浏览器地址栏输入<code>http://mysite:8002</code> 后能够看到同样的效果。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjda9trhq000105cl4lwt6sgx","tag_id":"cjda9trhw000405clve1cx7yx","_id":"cjda9trhy000605cloe73vwzs"},{"post_id":"cjda9trhu000305clwjuqwqfj","tag_id":"cjda9trhy000505clfezq6aaz","_id":"cjda9trhz000705clmej62ddb"},{"post_id":"cje77l3gd000007clwyn7d9vr","tag_id":"cje77l3gj000107cl424a007q","_id":"cje77l3gl000207clpmynhpof"}],"Tag":[{"name":"GithubPages","_id":"cjda9trhw000405clve1cx7yx"},{"name":"About Blog","_id":"cjda9trhy000505clfezq6aaz"},{"name":"Apache","_id":"cje77l3gj000107cl424a007q"}]}}