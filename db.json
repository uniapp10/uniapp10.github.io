{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"01301f7e6b141c50360ede2a2bb14d2111d6dd5f","modified":1519830045018},{"_id":"source/tip.html","hash":"a319f5bb92519dec5b956f9a77374498ee49fc36","modified":1517379738796},{"_id":"source/favicon.ico","hash":"362a981ba3d3bf465db4ff674c07784707a98e34","modified":1517620756185},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1517304840306},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1517304840306},{"_id":"themes/BlueLake/_config.yml","hash":"cf8e4332eb9a748ae3ecc193709d601b4191e929","modified":1517628676054},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1517304840307},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1517304840315},{"_id":"source/apple-touch-icon.png","hash":"4df42d8668664345e2ab50420da1cafea991a105","modified":1517453794481},{"_id":"source/_posts/GitHubPages + Hexo 搭建此博客.md","hash":"b3f68421aff21645df19194b3d271f5e26ee6280","modified":1518233354937},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517386778078},{"_id":"source/_posts/关于此Blog.md","hash":"6dc5b67d85b8e866a78c0717d3267171de15ed6d","modified":1517463877146},{"_id":"source/about/index.md","hash":"46ee6d8f2012f6076e5bc37c46918bb9ffa6172d","modified":1517378800647},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517304840301},{"_id":"themes/BlueLake/.git/FETCH_HEAD","hash":"43e963878ff7bf79f7905e99dedaf325a1350342","modified":1517628556360},{"_id":"themes/BlueLake/.git/ORIG_HEAD","hash":"c292cfc66fa6a171bcb9e25157b4ee8f09da6755","modified":1517628556374},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517304835227},{"_id":"themes/BlueLake/.git/config","hash":"cb5d8538f60766fe2a079a1894a586d81b258abf","modified":1517304840302},{"_id":"themes/BlueLake/.git/index","hash":"653bb10703645e475fd8fb9e9ddfae71d09a0bd3","modified":1517304840322},{"_id":"themes/BlueLake/.git/packed-refs","hash":"842a64dcd40e108353d1da6314a0c447e35b921d","modified":1517304840299},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1517304840307},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1517304840307},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1517304840308},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1517304840308},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1517304840308},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1517304840308},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1517304840308},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1517304840308},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1517304840314},{"_id":"themes/BlueLake/layout/base.jade","hash":"2e65a06a499fbb67c72f8345d71222e40e9ef523","modified":1517304840314},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1517304840314},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1517304840314},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1517304840314},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1517304840315},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1517304840315},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1517304840315},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1517304840317},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517304835227},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517304835229},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1517304835227},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517304835228},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517304835229},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517304835228},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"8a631319198d08f5bd81a3eaf66c6a503a986403","modified":1517304840301},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517304835227},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1517304840309},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1517304840310},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1517304840311},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1517304840311},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1517304840311},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1517304840311},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1517304840312},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1517304840312},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1517304840312},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1517304840313},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1517304840313},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1517304840313},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1517304840313},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1517304840316},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1517304840317},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1517304840318},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1517304840318},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1517304840319},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1517304840319},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1517304840321},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1517304840321},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1517304840321},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1517304840320},{"_id":"themes/BlueLake/.git/objects/pack/pack-b661a4a342e3a6d2919678428fe7a1af1916347f.idx","hash":"7a6c8d64aac4c8f93117a85d94e8099384ca40cc","modified":1517304840292},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"c292cfc66fa6a171bcb9e25157b4ee8f09da6755","modified":1517304840301},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"8a631319198d08f5bd81a3eaf66c6a503a986403","modified":1517304840302},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517304840300},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"8a631319198d08f5bd81a3eaf66c6a503a986403","modified":1517304840300},{"_id":"themes/BlueLake/.git/objects/pack/pack-b661a4a342e3a6d2919678428fe7a1af1916347f.pack","hash":"a8f391475221e019e87de24e007aa676b5619486","modified":1517304840291},{"_id":"public/tip.html","hash":"8a076e59900285d5500247722da6f149bd155022","modified":1526194332168},{"_id":"public/about/index.html","hash":"cb065e8d14c0ac8eaa0bb532e4be0ffc0b6c3565","modified":1526194332168},{"_id":"public/2018/01/31/关于此Blog/index.html","hash":"9fcf55c10a2cbeb8a2bdb14b679ba48a42bd4778","modified":1526194332168},{"_id":"public/archives/index.html","hash":"0e9e5e560ed96b0ee91cb971b6c60f963ca4e1a6","modified":1526194332169},{"_id":"public/archives/2018/index.html","hash":"0e9e5e560ed96b0ee91cb971b6c60f963ca4e1a6","modified":1526194332169},{"_id":"public/archives/2018/01/index.html","hash":"30e46252f075d3778ddc6253aadb1e1c05a72624","modified":1526194332169},{"_id":"public/archives/2018/02/index.html","hash":"59b1b65979f11f2564dded55c57c4cb8820f6543","modified":1526194332169},{"_id":"public/index.html","hash":"c567021b037316154d319392b24d27dc690376d3","modified":1526194332169},{"_id":"public/tags/About-Blog/index.html","hash":"3ff4c839750d94c0c9fb199441d3638be3d92140","modified":1526194332169},{"_id":"public/tags/GithubPages/index.html","hash":"1d981566441b95d1079783ae069397a9223bd0e7","modified":1526194332169},{"_id":"public/2018/02/05/GitHubPages + Hexo 搭建此博客/index.html","hash":"df6509140da5ba89d69a88a8f71d0fbab22ab45f","modified":1526194332169},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1517838456145},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1517838456145},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1517838456145},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1517838456145},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1517838456145},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1517838456145},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1517838456430},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1517838456432},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1517838456432},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1517838456433},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1517838456433},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1517838456433},{"_id":"source/_posts/Mac 下使用 Apache 服务器.md","hash":"60acc5b87f60569309a0beeeeb07a41b8a12a646","modified":1520127328749},{"_id":"public/tags/Apache/index.html","hash":"88508eab4f503694527bc667104e48821778a9de","modified":1526194332169},{"_id":"public/2018/02/25/Mac 下使用 Apache 服务器/index.html","hash":"bd41fbb2c9f623e0fb13deee5250115a1e9ada8a","modified":1526194332169},{"_id":"source/_posts/App 开发者学习使用 MySQL.md","hash":"d3671bfa974a987a53469ef5a2a4e403237a28ba","modified":1526194272437},{"_id":"public/archives/2018/05/index.html","hash":"398f2e9e6b23fa8d3413c1611ef27c879646e976","modified":1526194332180},{"_id":"public/tags/MySQL/index.html","hash":"abbf724c71a755604a14f31ba120410d508d828e","modified":1526194332180},{"_id":"public/2018/05/13/App 开发者学习使用 MySQL/index.html","hash":"f2269ed4299cd01a0f78d8cd14baaca6a2672577","modified":1526194332181}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>","source":"tip.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>","date":"2018-02-03T03:27:46.352Z","updated":"2018-01-31T06:22:18.796Z","path":"tip.html","title":"","comments":1,"layout":"page","_id":"cjda9trhd000005cld6vd34m9","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>温馨提示</title>\n</head>\n<body>\n\n<div style=\"align-items: center; font-size: 32px;\">\n\t此功能还在完善中....\n</div>\n\n</body>\n</html>"},{"_content":"\n最喜欢的数字是10\n不是要追求十全十美\n而是相信完美并不存在\n所以要保持一切从零开始的心态\n和敢于从零开始的勇气\n","source":"about/index.md","raw":"\n最喜欢的数字是10\n不是要追求十全十美\n而是相信完美并不存在\n所以要保持一切从零开始的心态\n和敢于从零开始的勇气\n","date":"2018-02-05T08:48:03.423Z","updated":"2018-01-31T06:06:40.647Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjda9trht000205clph87zcmv","content":"<p>最喜欢的数字是10<br>不是要追求十全十美<br>而是相信完美并不存在<br>所以要保持一切从零开始的心态<br>和敢于从零开始的勇气</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最喜欢的数字是10<br>不是要追求十全十美<br>而是相信完美并不存在<br>所以要保持一切从零开始的心态<br>和敢于从零开始的勇气</p>\n"}],"Post":[{"title":"GithubPages + Hexo 搭建博客","date":"2018-02-05T13:22:00.000Z","_content":"\n\n\n## GitHubPages是什么？\n\nGitHubPages 是 GitHub 公司为 [github](https://github.com) 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。\n\n比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  [uniapp10/hexo-theme-BlueLake](https://github.com/uniapp10/hexo-theme-BlueLake) ，打开后你会看到：\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png)\n\n\n\n眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 [uniapp10/hexo-theme-BlueLake](http://unicoinapp.top/hexo-theme-BlueLake/) ，打开后就变成：\n\n\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png)\n\n\n\n是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。\n\n作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 [GitHubPages](https://pages.github.com/) 。\n\n## 有什么限制？\n\n\n\n1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。\n\n2 每月访问 GitHubPages 的带宽上限为 100GB。\n\n3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。\n\n## 如何使用？\n\n#### 找到 GitHubPages\n\nGitHubPages 入口按照下面的步骤可以找到：\n\n1 点击工程设置：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png)\n\n---\n\n2 下滑到 GitHub Pages，可以看到其超链接：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages.png)\n\n---\n\n3 下滑到底部，可以看到官方推荐搭建 Blog 的 [Jekyll框架](https://jekyllrb.com/docs/quickstart/) :\n\n\n\n![GitHub官方推荐Blog框架](http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png)\n\n Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 [hexo框架](https://hexo.io/zh-cn/docs/index.html) 。\n\n#### 创建工程\n\n\n\n相信开发者都拥有自己的 [github](https://github.com/) 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。\n\n登录 gitHub 账号，新建工程：\n\n![新建GitHub工程](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png)\n\n工程名称有严格的限制，具体命名要求可以在 [官网文档](https://help.github.com/articles/user-organization-and-project-pages/) 找到。\n\n![命名要求](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png)\n\n#### 安装Hexo\n\n\n\n安装步骤可以参照：[hexo安装](https://hexo.io/zh-cn/docs/index.html)\n\n#### 选取使用的主题\n\n[挑选主题](https://hexo.io/themes/) ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 [BlueLake](https://github.com/chaooo/hexo-theme-BlueLake) 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。\n\n#### 为工程配置域名\n\n\n\n首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。\n\n购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：\n\n![解析域名](http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png)\n\n添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。\n\n配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png)\n\n我填写的内容：\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png)\n\n\n\n\n\n一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。\n\n#### 发表新文章\n\n依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 `/source/_posts/` 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。\n\n## 不可缺少的能力\n\n一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：\n\n1 [ MarkDown 语法](http://wowubuntu.com/markdown/#em) 。\n\n2 图片存放到云上。\n\n如果将配图放在我们本身网站中，有两个缺点：\n\n​\t2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; \n\n​\t 2.2 引用和管理不方便，缺少配图管理工具。\n\n如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。\n\n写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。\n\n然后使用 hexo 命令部署到服务器上：\n\n```\nhexo g -d\n```\n\n最后使用 Git 命令提交到远程仓库，大功告成！\n\n不熟悉 hexo 命令的小伙伴，可以在终端使用 `hexo help` 命令获取对 hexo 命令参数的详细解释：\n\n```\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n```\n\n这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？\n\n步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！","source":"_posts/GitHubPages + Hexo 搭建此博客.md","raw":"---\ntitle: GithubPages + Hexo 搭建博客\ndate: 2018-02-05 21:22:00\ntags: GithubPages\n---\n\n\n\n## GitHubPages是什么？\n\nGitHubPages 是 GitHub 公司为 [github](https://github.com) 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。\n\n比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  [uniapp10/hexo-theme-BlueLake](https://github.com/uniapp10/hexo-theme-BlueLake) ，打开后你会看到：\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png)\n\n\n\n眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 [uniapp10/hexo-theme-BlueLake](http://unicoinapp.top/hexo-theme-BlueLake/) ，打开后就变成：\n\n\n\n![ProjectPages](http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png)\n\n\n\n是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。\n\n作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 [GitHubPages](https://pages.github.com/) 。\n\n## 有什么限制？\n\n\n\n1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。\n\n2 每月访问 GitHubPages 的带宽上限为 100GB。\n\n3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。\n\n## 如何使用？\n\n#### 找到 GitHubPages\n\nGitHubPages 入口按照下面的步骤可以找到：\n\n1 点击工程设置：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png)\n\n---\n\n2 下滑到 GitHub Pages，可以看到其超链接：\n\n![GitHubPages](http://p3gaf3kiq.bkt.clouddn.com/GitPages.png)\n\n---\n\n3 下滑到底部，可以看到官方推荐搭建 Blog 的 [Jekyll框架](https://jekyllrb.com/docs/quickstart/) :\n\n\n\n![GitHub官方推荐Blog框架](http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png)\n\n Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 [hexo框架](https://hexo.io/zh-cn/docs/index.html) 。\n\n#### 创建工程\n\n\n\n相信开发者都拥有自己的 [github](https://github.com/) 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。\n\n登录 gitHub 账号，新建工程：\n\n![新建GitHub工程](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png)\n\n工程名称有严格的限制，具体命名要求可以在 [官网文档](https://help.github.com/articles/user-organization-and-project-pages/) 找到。\n\n![命名要求](http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png)\n\n#### 安装Hexo\n\n\n\n安装步骤可以参照：[hexo安装](https://hexo.io/zh-cn/docs/index.html)\n\n#### 选取使用的主题\n\n[挑选主题](https://hexo.io/themes/) ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 [BlueLake](https://github.com/chaooo/hexo-theme-BlueLake) 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。\n\n#### 为工程配置域名\n\n\n\n首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。\n\n购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：\n\n![解析域名](http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png)\n\n添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。\n\n配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png)\n\n我填写的内容：\n\n![CNAME命名](http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png)\n\n\n\n\n\n一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。\n\n#### 发表新文章\n\n依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 `/source/_posts/` 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。\n\n## 不可缺少的能力\n\n一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：\n\n1 [ MarkDown 语法](http://wowubuntu.com/markdown/#em) 。\n\n2 图片存放到云上。\n\n如果将配图放在我们本身网站中，有两个缺点：\n\n​\t2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; \n\n​\t 2.2 引用和管理不方便，缺少配图管理工具。\n\n如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。\n\n写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。\n\n然后使用 hexo 命令部署到服务器上：\n\n```\nhexo g -d\n```\n\n最后使用 Git 命令提交到远程仓库，大功告成！\n\n不熟悉 hexo 命令的小伙伴，可以在终端使用 `hexo help` 命令获取对 hexo 命令参数的详细解释：\n\n```\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n```\n\n这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？\n\n步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！","slug":"GitHubPages + Hexo 搭建此博客","published":1,"updated":"2018-02-10T03:29:14.937Z","_id":"cjda9trhq000105cl4lwt6sgx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"GitHubPages是什么？\"><a href=\"#GitHubPages是什么？\" class=\"headerlink\" title=\"GitHubPages是什么？\"></a>GitHubPages是什么？</h2><p>GitHubPages 是 GitHub 公司为 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a> 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。</p>\n<p>比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  <a href=\"https://github.com/uniapp10/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">uniapp10/hexo-theme-BlueLake</a> ，打开后你会看到：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png\" alt=\"ProjectPages\"></p>\n<p>眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 <a href=\"http://unicoinapp.top/hexo-theme-BlueLake/\">uniapp10/hexo-theme-BlueLake</a> ，打开后就变成：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png\" alt=\"ProjectPages\"></p>\n<p>是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。</p>\n<p>作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHubPages</a> 。</p>\n<h2 id=\"有什么限制？\"><a href=\"#有什么限制？\" class=\"headerlink\" title=\"有什么限制？\"></a>有什么限制？</h2><p>1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。</p>\n<p>2 每月访问 GitHubPages 的带宽上限为 100GB。</p>\n<p>3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><h4 id=\"找到-GitHubPages\"><a href=\"#找到-GitHubPages\" class=\"headerlink\" title=\"找到 GitHubPages\"></a>找到 GitHubPages</h4><p>GitHubPages 入口按照下面的步骤可以找到：</p>\n<p>1 点击工程设置：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>2 下滑到 GitHub Pages，可以看到其超链接：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>3 下滑到底部，可以看到官方推荐搭建 Blog 的 <a href=\"https://jekyllrb.com/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">Jekyll框架</a> :</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png\" alt=\"GitHub官方推荐Blog框架\"></p>\n<p> Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 <a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo框架</a> 。</p>\n<h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><p>相信开发者都拥有自己的 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a> 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。</p>\n<p>登录 gitHub 账号，新建工程：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png\" alt=\"新建GitHub工程\"></p>\n<p>工程名称有严格的限制，具体命名要求可以在 <a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">官网文档</a> 找到。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png\" alt=\"命名要求\"></p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>安装步骤可以参照：<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo安装</a></p>\n<h4 id=\"选取使用的主题\"><a href=\"#选取使用的主题\" class=\"headerlink\" title=\"选取使用的主题\"></a>选取使用的主题</h4><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">挑选主题</a> ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 <a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake</a> 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。</p>\n<h4 id=\"为工程配置域名\"><a href=\"#为工程配置域名\" class=\"headerlink\" title=\"为工程配置域名\"></a>为工程配置域名</h4><p>首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。</p>\n<p>购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png\" alt=\"解析域名\"></p>\n<p>添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。</p>\n<p>配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png\" alt=\"CNAME命名\"></p>\n<p>我填写的内容：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png\" alt=\"CNAME命名\"></p>\n<p>一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。</p>\n<h4 id=\"发表新文章\"><a href=\"#发表新文章\" class=\"headerlink\" title=\"发表新文章\"></a>发表新文章</h4><p>依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 <code>/source/_posts/</code> 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。</p>\n<h2 id=\"不可缺少的能力\"><a href=\"#不可缺少的能力\" class=\"headerlink\" title=\"不可缺少的能力\"></a>不可缺少的能力</h2><p>一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：</p>\n<p>1 <a href=\"http://wowubuntu.com/markdown/#em\" target=\"_blank\" rel=\"noopener\"> MarkDown 语法</a> 。</p>\n<p>2 图片存放到云上。</p>\n<p>如果将配图放在我们本身网站中，有两个缺点：</p>\n<p>​    2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; </p>\n<p>​     2.2 引用和管理不方便，缺少配图管理工具。</p>\n<p>如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。</p>\n<p>写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。</p>\n<p>然后使用 hexo 命令部署到服务器上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<p>最后使用 Git 命令提交到远程仓库，大功告成！</p>\n<p>不熟悉 hexo 命令的小伙伴，可以在终端使用 <code>hexo help</code> 命令获取对 hexo 命令参数的详细解释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  help     Get help on a command.</span><br><span class=\"line\">  init     Create a new Hexo folder.</span><br><span class=\"line\">  version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br></pre></td></tr></table></figure>\n<p>这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？</p>\n<p>步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GitHubPages是什么？\"><a href=\"#GitHubPages是什么？\" class=\"headerlink\" title=\"GitHubPages是什么？\"></a>GitHubPages是什么？</h2><p>GitHubPages 是 GitHub 公司为 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a> 上的工程所提供的概览网页。如果将上传的一个工程比作一本书，那么 GitHubPages 可以看做书本的封面。有封面的目的很简单，就是为了使工程看起来更美观和更容易读懂。</p>\n<p>比如，我把搭建本 Blog 网站的工程 fork 到自己的 github 网站  <a href=\"https://github.com/uniapp10/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">uniapp10/hexo-theme-BlueLake</a> ，打开后你会看到：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/ProjectPages0.png\" alt=\"ProjectPages\"></p>\n<p>眼前的一堆代码，给人的第一感觉是抽象，继而令人迷茫。但是如果我给它加上 GitHubPages ，变成 <a href=\"http://unicoinapp.top/hexo-theme-BlueLake/\">uniapp10/hexo-theme-BlueLake</a> ，打开后就变成：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitHubPage2.png\" alt=\"ProjectPages\"></p>\n<p>是不是瞬间有种耳目一新、如浴春风的快感？而且我在副标题中指出了该工程的简介——一个简单的、能够在不同设备运行的 、基于 hexo 框架的主题。</p>\n<p>作为封面仅仅是 GitHubPages 的一种使用场景，使用它还可以为工程封面指定自定义域名。更重要的是可以创建自己的静态  Blog 网站，这才是文章的重点内容。基于 github 为程序猿服务的先天基因，简直不能太好用，下面详细介绍一下它的使用方式。详细的介绍可以参考官方文档 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHubPages</a> 。</p>\n<h2 id=\"有什么限制？\"><a href=\"#有什么限制？\" class=\"headerlink\" title=\"有什么限制？\"></a>有什么限制？</h2><p>1 GitHubPages 为每个工程提供的空间大小上限为 1GB，来搭建个人 Blog 网站绰绰有余。</p>\n<p>2 每月访问 GitHubPages 的带宽上限为 100GB。</p>\n<p>3 GitHubPages 编译的频率低于每小时10次 ，完全满足个人  Blog 静态网页的要求。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><h4 id=\"找到-GitHubPages\"><a href=\"#找到-GitHubPages\" class=\"headerlink\" title=\"找到 GitHubPages\"></a>找到 GitHubPages</h4><p>GitHubPages 入口按照下面的步骤可以找到：</p>\n<p>1 点击工程设置：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages0.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>2 下滑到 GitHub Pages，可以看到其超链接：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitPages.png\" alt=\"GitHubPages\"></p>\n<hr>\n<p>3 下滑到底部，可以看到官方推荐搭建 Blog 的 <a href=\"https://jekyllrb.com/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">Jekyll框架</a> :</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/GitBlog.png\" alt=\"GitHub官方推荐Blog框架\"></p>\n<p> Jekyll 框架文档为英文，所以英文不是障碍的友人可以选择，偷懒的我选择了易读的汉化 <a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo框架</a> 。</p>\n<h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><p>相信开发者都拥有自己的 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a> 账号。什么？没有？好吧，没有的也没关系，申请很简单。不要被全英文的网站所吓倒，反复几次过后你会发现——和申请QQ的套路没多大差别。</p>\n<p>登录 gitHub 账号，新建工程：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93.png\" alt=\"新建GitHub工程\"></p>\n<p>工程名称有严格的限制，具体命名要求可以在 <a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">官网文档</a> 找到。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Git%E4%BB%93%E5%BA%93%E5%90%8D.png\" alt=\"命名要求\"></p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>安装步骤可以参照：<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo安装</a></p>\n<h4 id=\"选取使用的主题\"><a href=\"#选取使用的主题\" class=\"headerlink\" title=\"选取使用的主题\"></a>选取使用的主题</h4><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">挑选主题</a> ，不同的主题，安装方式不同，具体安装方式可以在各主题的 github 中看到。我选择的是 <a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake</a> 。推荐排名靠前的主题样式，因为它们不仅意味着符合大众的审美，而且往往 github 上面的使用步骤写的全面详细。相信一句话：「群众的眼光是雪亮的」。</p>\n<h4 id=\"为工程配置域名\"><a href=\"#为工程配置域名\" class=\"headerlink\" title=\"为工程配置域名\"></a>为工程配置域名</h4><p>首先需要购买域名。推荐在国内的几大服务商处购买，它们还附带有解析、备案等一系列服务。我在阿里云购买的 .top 域名，售价 ¥2 大洋。</p>\n<p>购买成功后，添加解析地址。各服务商的解析方式都差不多，下面以阿里云的域名解析为例：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png\" alt=\"解析域名\"></p>\n<p>添加 www 和不带 www 的两个解析地址。其中带 www 的域名解析到不带 www 的地址，不带 www 的域名解析到 username.github.io。这样可以让从两个地址的访问记录统一到我们的 github 上面的地址，有利于提高网站在 Google 和 Baidu 的排名。</p>\n<p>配置项目。打开新建的 username.github.io 工程，在工程中新建文件，取名为 CNAME 。内容为自己要绑定的域名。</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME0.png\" alt=\"CNAME命名\"></p>\n<p>我填写的内容：</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0CNAME.png\" alt=\"CNAME命名\"></p>\n<p>一切顺利的话，输入购买的域名，就能看到自己的 Blog 网站啦。快给自己点个赞吧。</p>\n<h4 id=\"发表新文章\"><a href=\"#发表新文章\" class=\"headerlink\" title=\"发表新文章\"></a>发表新文章</h4><p>依据 GitHub 搭建的 Blog 网站文章，实际是一个静态网页。该网页内容可以依据 MarkDown 创建。书写的 Blog 文件需要存放到正确的位置。该位置可以参照主题自带的 hello 文件。比如我选择主题的 hello.md 文件，存放在 根目录 <code>/source/_posts/</code> 下。因此我只要在该目录下，ctrl + d 复制 hello.md ，然后修改文件标题就可以开始写 Blog 了。</p>\n<h2 id=\"不可缺少的能力\"><a href=\"#不可缺少的能力\" class=\"headerlink\" title=\"不可缺少的能力\"></a>不可缺少的能力</h2><p>一篇令人赏心悦目的文章，少不了标题、插图。所以需要掌握以下两种 Blog 写作技能：</p>\n<p>1 <a href=\"http://wowubuntu.com/markdown/#em\" target=\"_blank\" rel=\"noopener\"> MarkDown 语法</a> 。</p>\n<p>2 图片存放到云上。</p>\n<p>如果将配图放在我们本身网站中，有两个缺点：</p>\n<p>​    2.1 会造成网页空间迅速增大（别忘了空间上限为1GB）; </p>\n<p>​     2.2 引用和管理不方便，缺少配图管理工具。</p>\n<p>如果把图片全部放到云上面，然后在文章中以外部链接的方式引用，就能轻松解决上述两个缺点。易用并且带有图片资源外链生成功能的厂家，推荐国内的七牛云 。温馨提示一下：七牛云认证时需要身份认证。</p>\n<p>写好文字，配好图片，加上适当的排版美化，一篇热气腾腾、洋溢着成就感的文章就完成了。</p>\n<p>然后使用 hexo 命令部署到服务器上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<p>最后使用 Git 命令提交到远程仓库，大功告成！</p>\n<p>不熟悉 hexo 命令的小伙伴，可以在终端使用 <code>hexo help</code> 命令获取对 hexo 命令参数的详细解释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  help     Get help on a command.</span><br><span class=\"line\">  init     Create a new Hexo folder.</span><br><span class=\"line\">  version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br></pre></td></tr></table></figure>\n<p>这种学习方法对所有的终端命令都有效，包括 Git 在内。记住——这个武林绝招只传男，不传女。不然怎么能体现咱们程序猿们的一阵噼里啪啦的高深莫测呢？</p>\n<p>步骤比较繁琐，但是顺利做完，我们对网站搭建会形成整体的认识。Blog 只是一个简单的网站，我们日常接触的企业网站比较复杂，需要不同节点专业人员的相互配合。比如，会有设计 UI 的 MM, 处理前端逻辑的程序猿，后台处理数据、提供服务的运维人员等，每一个步骤都有专业的人去处理。通过搭建 Blog 认识到这些，相信以后与别人有更默契的配合！</p>\n"},{"title":"关于此Blog","date":"2018-01-31T07:07:49.000Z","_content":"\n互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。\n\n而我，是一名猿类成员。 \n\n自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。\n\n一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。\n\n丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！\n\n![心若在，梦就在](http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg)","source":"_posts/关于此Blog.md","raw":"---\ntitle: 关于此Blog\ndate: 2018-01-31 15:07:49\ntags: About Blog\n---\n\n互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。\n\n而我，是一名猿类成员。 \n\n自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。\n\n一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。\n\n丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！\n\n![心若在，梦就在](http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg)","slug":"关于此Blog","published":1,"updated":"2018-02-01T05:44:37.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjda9trhu000305clwjuqwqfj","content":"<p>互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。</p>\n<p>而我，是一名猿类成员。 </p>\n<p>自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。</p>\n<p>一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。</p>\n<p>丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg\" alt=\"心若在，梦就在\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>互联网圈流行一种对某个工种贴标签的潮流，比如现行的 “程序猿”、“运营喵”、“产品狗”、“市场鸡”等，可以让圈外听众快速勾勒出具体工种的轮廓，或者让圈内人获得基本共识，产生惺惺相惜的感觉。</p>\n<p>而我，是一名猿类成员。 </p>\n<p>自从踏入了社会丛林，我就告诉自己要不断学习生存技能。因为「物竞天择」的原则决定了我们的生存方式是——在路上。感谢青春年代能有这样的生活方式。</p>\n<p>一直在路上，毫无依靠的我们才可以无视成年老虎和狐狸定下的丛林法则，可以相对自由地选择自己的生活。</p>\n<p>丛林生活中，我不敢放松精神，所以我找到了自己的休憩地——记录Blog。在这里，我要静心记录点点滴滴的学习，用心浇灌自己栽培的知识树林，希望它们茁壮成长，成为一个繁茂的、供程序猿玩耍的后花园！</p>\n<p><img src=\"http://p3gaf3kiq.bkt.clouddn.com/Dream.jpg\" alt=\"心若在，梦就在\"></p>\n"},{"title":"小白 Mac下使用 Apache 服务器","date":"2018-02-25T12:37:00.000Z","_content":"\n作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。\n\n#### 什么是服务器？\n\n顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。\n\n#### 一个完整的网络请求需要哪些过程？\n\n我们在浏览器输入 `http://www.baidu.com` 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：\n\n###### 1 解析域名，获取百度主机地址；\n\n互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 `192.168.xxx.xxx` 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 `baidu.com` 比起 `138.168.0.1 ` 记忆的难度就会大大降低。\n\n按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。\n\n######2 与百度主机建立连接；\n\n解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。\n\n######3 通过协议获取服务；\n\n建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。\n\nMac 机器下，解析域名缓存的文件为 `/private/etc/hosts` ，打开文件，能看到 IP 和域名相信的对应关系：\n\n```\n216.58.200.192\tandroid.com\n216.58.200.192\twww.android.com\n216.58.200.192\ta.android.com\n216.58.200.192\tconnectivitycheck.android.com\n216.58.200.192\td.android.com\n...\n```\n\n我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。\n\n在浏览器中输入的内容除了 `baidu.com` 的域名外，还有 `http://www` 。其中 http 标识使用的协议，`www` 标识访问主机上的文件位置。\n\n####Apache 服务器的优点？\n\nMac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。\n\n####配置 Apache 服务器\n\nMac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 `/private/etc/apache2` 。\n\n打开配置文件 `httpd.conf` ，去掉 `Include /private/etc/apache2/extra/httpd-vhosts.conf` 前的 # ， 启动虚拟机服务。添加监听端口， 比如 `8002`：\n\n```\nListen 8002\n```\n\n\n\n打开文件 `/private/etc/apache2/extra/httpd-vhosts.conf` ，可以看到默认打开了 80 端口。我们可以手动添加和 `httpd-vhosts.conf` 文件中相匹配的监听端口 8002， 添加如下代码：\n\n```\n<VirtualHost *:8002>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"具体目录\"\n    ServerName mysite\n    ErrorLog \"/private/var/log/apache2/dummy-host2.example.com-error_log\"\n    CustomLog \"/private/var/log/apache2/dummy-host2.example.com-access_log\" common\n    <Directory />\n                Options Indexes FollowSymLinks MultiViews\n                AllowOverride None\n                Order deny,allow\n                Allow from all\n    </Directory>\n</VirtualHost>\n```\n\n如果出现无法修改文件的提示，参考下面的修改文件权限。\n\n####修改文件权限\n\n文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —>显示简介—>共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。\n\n当然也可以通过命令行的方式修改。在终端输入更改文件的命令 `chmod u+w 文件路径`  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 [Linux命令:修改文件权限命令chmod、chgrp、chown详解](http://www.cnblogs.com/Berryxiong/p/6193866.html) 。\n\n####启动 Apache 服务器\n\n在终端输入 `sudo apachectl restart` 重新启动 Apache 服务器，在浏览器地址栏输入 `http://127.0.0.1:8002` 就能看到我们设定好的 `具体目录` 下的文件详情。\n\n根据前面讲述的原理，我们可以在` /private/etc/hosts` 文件中添加域名解析 `127.0.0.1\tmysite` ，然后在浏览器地址栏输入`http://mysite:8002` 后能够看到同样的效果。\n\n#### 总结\n\n全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。\n\n\n\n","source":"_posts/Mac 下使用 Apache 服务器.md","raw":"---\ntitle: 小白 Mac下使用 Apache 服务器\ndate: 2018-02-25 20:37:00\ntags: Apache\n---\n\n作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。\n\n#### 什么是服务器？\n\n顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。\n\n#### 一个完整的网络请求需要哪些过程？\n\n我们在浏览器输入 `http://www.baidu.com` 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：\n\n###### 1 解析域名，获取百度主机地址；\n\n互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 `192.168.xxx.xxx` 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 `baidu.com` 比起 `138.168.0.1 ` 记忆的难度就会大大降低。\n\n按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。\n\n######2 与百度主机建立连接；\n\n解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。\n\n######3 通过协议获取服务；\n\n建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。\n\nMac 机器下，解析域名缓存的文件为 `/private/etc/hosts` ，打开文件，能看到 IP 和域名相信的对应关系：\n\n```\n216.58.200.192\tandroid.com\n216.58.200.192\twww.android.com\n216.58.200.192\ta.android.com\n216.58.200.192\tconnectivitycheck.android.com\n216.58.200.192\td.android.com\n...\n```\n\n我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。\n\n在浏览器中输入的内容除了 `baidu.com` 的域名外，还有 `http://www` 。其中 http 标识使用的协议，`www` 标识访问主机上的文件位置。\n\n####Apache 服务器的优点？\n\nMac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。\n\n####配置 Apache 服务器\n\nMac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 `/private/etc/apache2` 。\n\n打开配置文件 `httpd.conf` ，去掉 `Include /private/etc/apache2/extra/httpd-vhosts.conf` 前的 # ， 启动虚拟机服务。添加监听端口， 比如 `8002`：\n\n```\nListen 8002\n```\n\n\n\n打开文件 `/private/etc/apache2/extra/httpd-vhosts.conf` ，可以看到默认打开了 80 端口。我们可以手动添加和 `httpd-vhosts.conf` 文件中相匹配的监听端口 8002， 添加如下代码：\n\n```\n<VirtualHost *:8002>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"具体目录\"\n    ServerName mysite\n    ErrorLog \"/private/var/log/apache2/dummy-host2.example.com-error_log\"\n    CustomLog \"/private/var/log/apache2/dummy-host2.example.com-access_log\" common\n    <Directory />\n                Options Indexes FollowSymLinks MultiViews\n                AllowOverride None\n                Order deny,allow\n                Allow from all\n    </Directory>\n</VirtualHost>\n```\n\n如果出现无法修改文件的提示，参考下面的修改文件权限。\n\n####修改文件权限\n\n文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —>显示简介—>共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。\n\n当然也可以通过命令行的方式修改。在终端输入更改文件的命令 `chmod u+w 文件路径`  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 [Linux命令:修改文件权限命令chmod、chgrp、chown详解](http://www.cnblogs.com/Berryxiong/p/6193866.html) 。\n\n####启动 Apache 服务器\n\n在终端输入 `sudo apachectl restart` 重新启动 Apache 服务器，在浏览器地址栏输入 `http://127.0.0.1:8002` 就能看到我们设定好的 `具体目录` 下的文件详情。\n\n根据前面讲述的原理，我们可以在` /private/etc/hosts` 文件中添加域名解析 `127.0.0.1\tmysite` ，然后在浏览器地址栏输入`http://mysite:8002` 后能够看到同样的效果。\n\n#### 总结\n\n全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。\n\n\n\n","slug":"Mac 下使用 Apache 服务器","published":1,"updated":"2018-03-04T01:35:28.749Z","_id":"cje77l3gd000007clwyn7d9vr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。</p>\n<h4 id=\"什么是服务器？\"><a href=\"#什么是服务器？\" class=\"headerlink\" title=\"什么是服务器？\"></a>什么是服务器？</h4><p>顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。</p>\n<h4 id=\"一个完整的网络请求需要哪些过程？\"><a href=\"#一个完整的网络请求需要哪些过程？\" class=\"headerlink\" title=\"一个完整的网络请求需要哪些过程？\"></a>一个完整的网络请求需要哪些过程？</h4><p>我们在浏览器输入 <code>http://www.baidu.com</code> 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：</p>\n<h6 id=\"1-解析域名，获取百度主机地址；\"><a href=\"#1-解析域名，获取百度主机地址；\" class=\"headerlink\" title=\"1 解析域名，获取百度主机地址；\"></a>1 解析域名，获取百度主机地址；</h6><p>互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 <code>192.168.xxx.xxx</code> 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 <code>baidu.com</code> 比起 <code>138.168.0.1</code> 记忆的难度就会大大降低。</p>\n<p>按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。</p>\n<p>######2 与百度主机建立连接；</p>\n<p>解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。</p>\n<p>######3 通过协议获取服务；</p>\n<p>建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。</p>\n<p>Mac 机器下，解析域名缓存的文件为 <code>/private/etc/hosts</code> ，打开文件，能看到 IP 和域名相信的对应关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">216.58.200.192\tandroid.com</span><br><span class=\"line\">216.58.200.192\twww.android.com</span><br><span class=\"line\">216.58.200.192\ta.android.com</span><br><span class=\"line\">216.58.200.192\tconnectivitycheck.android.com</span><br><span class=\"line\">216.58.200.192\td.android.com</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。</p>\n<p>在浏览器中输入的内容除了 <code>baidu.com</code> 的域名外，还有 <code>http://www</code> 。其中 http 标识使用的协议，<code>www</code> 标识访问主机上的文件位置。</p>\n<p>####Apache 服务器的优点？</p>\n<p>Mac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。</p>\n<p>####配置 Apache 服务器</p>\n<p>Mac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 <code>/private/etc/apache2</code> 。</p>\n<p>打开配置文件 <code>httpd.conf</code> ，去掉 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code> 前的 # ， 启动虚拟机服务。添加监听端口， 比如 <code>8002</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8002</span><br></pre></td></tr></table></figure>\n<p>打开文件 <code>/private/etc/apache2/extra/httpd-vhosts.conf</code> ，可以看到默认打开了 80 端口。我们可以手动添加和 <code>httpd-vhosts.conf</code> 文件中相匹配的监听端口 8002， 添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8002&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class=\"line\">    DocumentRoot &quot;具体目录&quot;</span><br><span class=\"line\">    ServerName mysite</span><br><span class=\"line\">    ErrorLog &quot;/private/var/log/apache2/dummy-host2.example.com-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;/private/var/log/apache2/dummy-host2.example.com-access_log&quot; common</span><br><span class=\"line\">    &lt;Directory /&gt;</span><br><span class=\"line\">                Options Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">                AllowOverride None</span><br><span class=\"line\">                Order deny,allow</span><br><span class=\"line\">                Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>如果出现无法修改文件的提示，参考下面的修改文件权限。</p>\n<p>####修改文件权限</p>\n<p>文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —&gt;显示简介—&gt;共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。</p>\n<p>当然也可以通过命令行的方式修改。在终端输入更改文件的命令 <code>chmod u+w 文件路径</code>  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 <a href=\"http://www.cnblogs.com/Berryxiong/p/6193866.html\" target=\"_blank\" rel=\"noopener\">Linux命令:修改文件权限命令chmod、chgrp、chown详解</a> 。</p>\n<p>####启动 Apache 服务器</p>\n<p>在终端输入 <code>sudo apachectl restart</code> 重新启动 Apache 服务器，在浏览器地址栏输入 <code>http://127.0.0.1:8002</code> 就能看到我们设定好的 <code>具体目录</code> 下的文件详情。</p>\n<p>根据前面讲述的原理，我们可以在<code>/private/etc/hosts</code> 文件中添加域名解析 <code>127.0.0.1    mysite</code> ，然后在浏览器地址栏输入<code>http://mysite:8002</code> 后能够看到同样的效果。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为小白入门软件开发中，涉及到网络部分时，内心就会产生很多迷惑。比如网络请求中采用的 http 和 ftp 协议，网络数据传输的七层模型，域名和 IP 需要对应时的解析等，理解起来都比较抽象。下面以配置 Mac 下的 Apache 服务器为目标，从实际开发人员的角度，针对小白用户，介绍一下网络请求的过程，以便于开发中遇到网络问题能够整体把握，逐步排查错误。</p>\n<h4 id=\"什么是服务器？\"><a href=\"#什么是服务器？\" class=\"headerlink\" title=\"什么是服务器？\"></a>什么是服务器？</h4><p>顾名思义，服务器就是提供服务的机器。我们可以向服务器发送请求，获取服务。类比日常生活中的场景：将服务器比作银行，它可以提供兑换现金的服务。如果我们需要现金，就去柜台向银行业务员提出要求（发送请求），如果满足条件，我们就能得到想要的现金（获取服务）。</p>\n<h4 id=\"一个完整的网络请求需要哪些过程？\"><a href=\"#一个完整的网络请求需要哪些过程？\" class=\"headerlink\" title=\"一个完整的网络请求需要哪些过程？\"></a>一个完整的网络请求需要哪些过程？</h4><p>我们在浏览器输入 <code>http://www.baidu.com</code> 的时候，就能获取百度首页。从具体实现上面，经历以下 3 个过程：</p>\n<h6 id=\"1-解析域名，获取百度主机地址；\"><a href=\"#1-解析域名，获取百度主机地址；\" class=\"headerlink\" title=\"1 解析域名，获取百度主机地址；\"></a>1 解析域名，获取百度主机地址；</h6><p>互联网上的任意一台主机都是以 IP 地址标识的，比如我们主机在局域网中的地址通常都是都是 <code>192.168.xxx.xxx</code> 的形式。通过 IP 地址，能够准确确定一台主机在互联网的位置，但是准确记忆多个 IP 地址却比较困难。聪明的科学家想出了用域名来作为 IP 地址的别名来帮助记忆，比如 <code>baidu.com</code> 比起 <code>138.168.0.1</code> 记忆的难度就会大大降低。</p>\n<p>按照设计规则，解析域名的工作有专门的服务器完成，解析的过程由主机自动完成。但是为了加快解析速度，本地主机会将解析成功的域名和 IP 的对照关系缓存到本地。在我们输入域名发送请求时，主机会首先寻找本地缓存中与域名对应的 IP 地址。</p>\n<p>######2 与百度主机建立连接；</p>\n<p>解析百度域名为 IP 地址后，就能通过 IP 地址与百度主机建立连接，也就是我们经常听到的 TCP/IP 连接。</p>\n<p>######3 通过协议获取服务；</p>\n<p>建立连接后，百度对我们发送的首页请求做出响应，返回具体内容。在本机按照一定的规则解析后，就是我们看到的样子。</p>\n<p>Mac 机器下，解析域名缓存的文件为 <code>/private/etc/hosts</code> ，打开文件，能看到 IP 和域名相信的对应关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">216.58.200.192\tandroid.com</span><br><span class=\"line\">216.58.200.192\twww.android.com</span><br><span class=\"line\">216.58.200.192\ta.android.com</span><br><span class=\"line\">216.58.200.192\tconnectivitycheck.android.com</span><br><span class=\"line\">216.58.200.192\td.android.com</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>我们可以按照自己的喜好，在该文件中手动添加或修改域名和 IP 的对应关系。</p>\n<p>在浏览器中输入的内容除了 <code>baidu.com</code> 的域名外，还有 <code>http://www</code> 。其中 http 标识使用的协议，<code>www</code> 标识访问主机上的文件位置。</p>\n<p>####Apache 服务器的优点？</p>\n<p>Mac 电脑下自带了 Apache 服务器，可以通过它在我们本机模拟网络请求，对开发中的应用进行测试。结合 Apple 最求安全的理念，应该能够猜出 Apache 作为服务器的特点：稳定。而且 Mac 本身自带，使用起来免去了安装的麻烦。</p>\n<p>####配置 Apache 服务器</p>\n<p>Mac 中的 Apache 服务器默认处于关闭状态，它在本机的安装目录为 <code>/private/etc/apache2</code> 。</p>\n<p>打开配置文件 <code>httpd.conf</code> ，去掉 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code> 前的 # ， 启动虚拟机服务。添加监听端口， 比如 <code>8002</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8002</span><br></pre></td></tr></table></figure>\n<p>打开文件 <code>/private/etc/apache2/extra/httpd-vhosts.conf</code> ，可以看到默认打开了 80 端口。我们可以手动添加和 <code>httpd-vhosts.conf</code> 文件中相匹配的监听端口 8002， 添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8002&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class=\"line\">    DocumentRoot &quot;具体目录&quot;</span><br><span class=\"line\">    ServerName mysite</span><br><span class=\"line\">    ErrorLog &quot;/private/var/log/apache2/dummy-host2.example.com-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;/private/var/log/apache2/dummy-host2.example.com-access_log&quot; common</span><br><span class=\"line\">    &lt;Directory /&gt;</span><br><span class=\"line\">                Options Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">                AllowOverride None</span><br><span class=\"line\">                Order deny,allow</span><br><span class=\"line\">                Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>如果出现无法修改文件的提示，参考下面的修改文件权限。</p>\n<p>####修改文件权限</p>\n<p>文件权限属于文件属性的一种，可以通过查看文件属性方式修改：双击文件 —&gt;显示简介—&gt;共享与权限，能够看到文件具体的读取权限详情，点击右下角的 🔐 按钮，输入开机密码后更改权限。</p>\n<p>当然也可以通过命令行的方式修改。在终端输入更改文件的命令 <code>chmod u+w 文件路径</code>  就能修改文件为可读。对详细参数有兴趣的童鞋，可以参考 <a href=\"http://www.cnblogs.com/Berryxiong/p/6193866.html\" target=\"_blank\" rel=\"noopener\">Linux命令:修改文件权限命令chmod、chgrp、chown详解</a> 。</p>\n<p>####启动 Apache 服务器</p>\n<p>在终端输入 <code>sudo apachectl restart</code> 重新启动 Apache 服务器，在浏览器地址栏输入 <code>http://127.0.0.1:8002</code> 就能看到我们设定好的 <code>具体目录</code> 下的文件详情。</p>\n<p>根据前面讲述的原理，我们可以在<code>/private/etc/hosts</code> 文件中添加域名解析 <code>127.0.0.1    mysite</code> ，然后在浏览器地址栏输入<code>http://mysite:8002</code> 后能够看到同样的效果。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>全文首先介绍了网络请求整体过程的实现原理，并且结合 Mac 电脑简单介绍了域名解析的过程。后面根据网络请求的原理，详细讲解了 Mac 电脑启动 Apache 服务器的过程。一步一步操作下来，实现步骤并不复杂。本文针对编程小白入门，省去了其中的域名解析的详细过程和请求数据的具体格式等内容，疑问之处欢迎留言交流。</p>\n"},{"title":"App 开发者学习使用 MySQL","date":"2018-05-13T06:50:00.000Z","_content":"\n软件开发中除了前端页面的展示和后台服务的运行外，还有很重要的一部分就是数据存储。在数据存储方面，处于领头地位的两位是 Oracle 和 IBM。后者主要是针对银行、军队、政府或者大企业；后者除了提供大型服务器服务外，还有一些小型服务器，其中就包括 MySQL。MySQL 原来是 Sun 公司旗下的开源产品，后来 Sun 公司被 Oracle收购，MySQL 也成为了 Oracle 的一部分。MySQL 以其轻量级特点能够很方便地运行在个人 PC 上，因此是我们开发者学习数据库技术的首选产品。\n\n数据库服务器中可以创建多个数据库，其中每一个数据库中包含多张表，每一张表中包含多条数据。可以将服务器看做自己的电脑，一个数据库看做一个 Excel 文件，而一条数据就存储在一个 Excel 文件中的一行里面。\n\n#####1 安装\n[MySQL 官网](https://downloads.mysql.com/archives/community/) 下载适合自己电脑的产品。我使用的是 Mac , 因此我下载如下安装包：\n![MySQL](https://upload-images.jianshu.io/upload_images/1753235-78e412a984168a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nTips: 下载时需要个人注册 Oracle 的账号，按照要求注册留下信息即可，不要太抵触，毕竟免费使用了人家的产品，要求留下信息也不算过分。个人亲测还没有收到服务人员的推销。\n######2 安装\nMac 安装很简单，双击 pkg 安装包后，按照引导即可。成功的标志是出现欲抬头顶球的小海豚：\n![成功](https://upload-images.jianshu.io/upload_images/1753235-685ea6daf732a56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n默认安装的目录为：`usr/local/mysql`，如果想要在终端使用 mysql 命令，在 Mac 上需要设置如下环境变量：\n1 在终端输入：`sudo vi ~/.bash_profile`\n2 添加路径：\n```\n#mysql\n PATH=\"/usr/local/mysql安装路径/bin:${PATH}\"\n export PATH\n```\n3 在终端输入命令: `mysql`， 成功后的提示：\n`Access denied for user ...`\n######3 使用 MySQL\n常用的 MySQL 语句分为以下两大类:\n1. DML (Data Definition Language) 数据库定义语言，创建、删除更新数据库/数据表等；\n2. DQL (Data Query Language) 数据库查询语句，对数据库中的数据按条件查询结果；\n\nTips: mysql 语句不区分大小写\n\n#####数据库语句\n1.查询数据库 `show databases;`\n```\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n```\nmysql 系统创建了以上 4 个数据库，它们是 mysql 正常工作的基础配置，不要修改或者删除。\n\n2.创建数据库 `create database 数据库名 character set 数据库字符类型 collate 数据库校验规则;`\n使用命令`show character set;`能够查看 mysql 支持的字符类型：\n```\n+----------+---------------------------------+---------------------+--------+\n| Charset  | Description                     | Default collation   | Maxlen |\n+----------+---------------------------------+---------------------+--------+\n| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |\n| ascii    | US ASCII                        | ascii_general_ci    |      1 |\n| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |\n| binary   | Binary pseudo charset           | binary              |      1 |\n| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |\n| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |\n| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |\n| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |\n| cp850    | DOS West European               | cp850_general_ci    |      1 |\n| cp852    | DOS Central European            | cp852_general_ci    |      1 |\n| cp866    | DOS Russian                     | cp866_general_ci    |      1 |\n| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |\n```\n使用 `show collation like 'utf8%';` 能够看到utf8 字符类型的校验规则：\n```\n| utf8_estonian_ci           | utf8    | 198 |         | Yes      |       8 | PAD SPACE     |\n| utf8_general_ci            | utf8    |  33 | Yes     | Yes      |       1 | PAD SPACE     |\n| utf8_general_mysql500_ci   | utf8    | 223 |         | Yes      |       1 | PAD SPACE     |\n| utf8_german2_ci            | utf8    | 212 |         | Yes      |       8 | PAD SPACE     |\n| utf8_hungarian_ci          | utf8    | 210 |         | Yes      |       8 | PAD SPACE     |\n| utf8_icelandic_ci          | utf8    | 193 |         | Yes      |       8 | PAD SPACE     |\n| utf8_latvian_ci            | utf8    | 194 |         | Yes      |       8 | PAD SPACE     |\n| utf8_lithuanian_ci         | utf8    | 204 |         | Yes      |       8 | PAD SPACE     |\n| utf8_persian_ci            | utf8    | 208 |         | Yes      |       8 | PAD SPACE     |\n```\n默认的校验规则为：`utf8_general_ci`;\n创建数据库可以使用以下 3 种语句：\n```\ncreate database mydb1;\ncreate database mydb2 character set utf8;\ncreate database mydb3 character set utf8 collate utf8_general_ci;\n```\n其中前两种是最后一种的简写形式，最后一种能够指定特定的字符类型和校验规则。\n利用命令 `show create database mydb2;` 可以查看 mysql 系统内部创建数据库的语句。下面以 `mydb` 开头的均表示自定义数据库名；\n```\n+----------+----------------------------------------------------------------------------------------------+\n| Database | Create Database                                                                              |\n+----------+----------------------------------------------------------------------------------------------+\n| mydb2    | CREATE DATABASE `mydb2` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ |\n+----------+----------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n3.删除数据库 `drop database mydb1;`\n4.修改数据库 `alter database 数据库名称 更改信息；`\n比如，将数据库字符类型改为 gbk 编码：\n`alter database mysqlite2 character set gbk;`\n5.切换数据库：`use 数据库名称；`\n6.查看当前使用的数据库 `select database();`\n\n#####数据表语句\n1. 创建表\n```\ncreate table tabel_name\n(\n\tfielld1 datatype,\n\tfield2 datatype,\n\tfield3 datatype\n)character set 字符集 collate 校对规则；\n```\n其中：field 表示字段；datatype 表示字段类型，可以理解成 Excel 表中列的名称；\nmysql 中字段的类型，可以类比 java 学习，二者的对应关系如下：\n![类型对比1](https://upload-images.jianshu.io/upload_images/1753235-375f3088907a3ec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![类型对比2](https://upload-images.jianshu.io/upload_images/1753235-6c84bd09aceac036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nmysql 中也有存储大数据的类型：\nBLOB(字节流)、TEXT(字符流) ;\n日期时间类型有：DATE、 TIME、 DATETIME、 TIMESTAMP 四种。\n其中 DATE 只表示日期；TIME 只表示时间；DATETIME 表示日期和时间；TIMESTAMP 表示时间戳，由 mysql 系统自动生成；\n\n我们可以使用如下语句创建一张员工表：\n```\ncreate table employee\n(\n\tid int,\n\tname varchar(20),\n\tgender varchar(10),\n\tbirthday date,\n\tentry_date date,\n\tjob varchar(100),\n\tsalary float,\n\tresume varchar(255)\n);\n```\n2. 查看表： `desc employee;`\n3. 查看 mysql 创建表的语句：`show create table employee;`\n4. 通过对表中字段定义约束，可以保证数据表的有效性和完整性。约束有以下 3 种类型：\n  1 primary key：定义主键约束， 不允许为空，不允许重复；\n  2 unique：唯一约束，不允许重复；\n  3 not null：非空约束，不允许为空；\n\n比如对 employee 表进行如下约束：\n```\ncreate table employee2\n(\n\tid int primary key auto_increment,\n\tname varchar(20) not null,\n\tgender varchar(10) not null,\n\tbirthday date,\n\tentry_date date,\n\tjob varchar(100),\n\tsalary float  not null,\n\tresume varchar(255)\n);\n```\n将 id 字段作为主键，对 name/gender/resume 字段进行非空限定；\n\n5.修改表\n1. 增加列：\n  alter table 表名 add 列字段 字段类型；\n2. 修改列类型：\n  alter table 表名 modify 列字段 字段类型；\n3. 删除列：\n  alter table 表名 drop 列字段；\n4. 修改表名称：\n  rename table 表名 to 新表名；\n5. 修改列名称：\n  alter table 表名 change [column] 旧列名 新列名 类型;\n6. 修改表字符集：\n  alter table 表名 character set utf8;\n\n6.添加表数据\n增加表数据有以下 3 种语句：\n```\n1 insert into users (id, username, birthday,entry_date,job,salary,resume,image) values(1,'juxin','1995-09-09','2016-01-01','ceo',15000,'good girl','not upload');\n2 insert into users (id, username,entry_date,job,salary,resume,image) values(2,'xueyang','2016-01-01','ceo',15000,'good girl','not upload');\n3 insert into users values(3,'yanhong','1995-09-09','2016-01-01','ceo',15000,'good girl','not upload');\n```\n其中 1、2 两种方法要求前后两个括号内的字段名和字段值一一对应；最后一种方法省略字段名，但是字段值需要和定义的表 employee 一一对应；\n7.修改表数据\nupdate 表名 set 列名=列值，列名=列值，列名=列值 where 从句；\n比如修改 employ 表中 name 为 lisi 的 job 为 CEO，语句如下：\n`update employ set name='CEO' where username='lisi';`\n8.删除表数据 `delete from employ where name='CEO'; `\n9.查询表数据\nselect [DISTINCT]  column1 expression, column2 expression… from 表名；\n比如：\n查看表 employ 中所有数据：`select * from employ;`\n将表 employ 中所有数据 salary 增加 1000：\n`select name, salary+1000 from employ;`\n将表 employ 中所有 name 变为姓名:\n`select name as 姓名 from employ;`\n将表 employ 中所有 name 为 lisi 的数据选出:\n`select * from employ where name='lisi';`\n10.where 语句修饰符\n\n| 比较运算符        | 含义          |\n| ------------- |:-----|\n|> < <= >= = <>      | 大于/小于/大于等于/小于等于/不等于\n| between … and      | 某一区间（包括边界值）    \n| in(100,200) | 是否是列表中值\n| like  |  模糊查询\n| is null   |   是否为空\n| 逻辑运算符        |  and/or/not        |\n\n比如，我们创建数据表 exams 记录考试成绩：\n```\ncreate table exams(\n     id int,\n     name varchar(30),\n     chinese double,\n     english double,\n     math double\n);\n\ninsert into exams values(1,'zhangsan',100,100,100);\ninsert into exams values(2,'lisi',100,100,99);\ninsert into exams values(3,'wang ',100,100,90);\ninsert into exams values(4,'wang ',80,80,60);\ninsert into exams values(4,'wang2 ',80,70,60);\n```\n查询英语成绩在 [80,100] 的同学：\n`select * from exams where english between 80 and 100;`\n也可以使用逻辑运算符实现：\n`select * from exams  where english>=80 and english<=100;`\n查询名字中包含`wang`的同学：\n`select * from exams where name like '%wang%';` \n%：通配符; \n_:  一个字符；\n查询名字中为`wang2`的同学可以使用：\n`select * from exams where name like 'wang_';` \n11.查询结果修饰符\n| 修饰符      | 含义                  |\n| -------- | :------------------ |\n| order by | 排序 （desc 降序/asc 升序） |\n| count    | 行数求和                |\n| sum      | 列求和                 |\n| avg      | 列平均                 |\n| max/min  | 列最值                 |\n| group    | 列分组                 |\n比如：\n按照总分成绩升序排列：`select * from exams order by chinese+english+math asc;`\n查找数学成绩大于100的同学总数：`select count(*) from exams where math>=100;`\n计算各科总分：\n`select sum(chinese),sum(english),sum(math) from exams;`\n计算语文平均分：\n`select avg(chinese) from exams;`\n也可以使用：\n`select sum(chinese)/count(*) from exams;`\n查找语文最高分：\n`select max(chinese) from exams;`\n按照名字对同学进行分组：\n`select name,sum(chinese+math) from exams group by name;`\ngroup 后可以跟 having 关键字对分组进行再次筛选：\n`select name,sum(chinese+math) from exams group by name having sum(chinese+math>100);`\n\n#####总结\nMySQL 是一款轻量级的数据库软件，使用它可以在在自己电脑搭建数据库，模拟数据库的创建、销毁，数据表的创建、销毁、修改，以及数据的增删改查。操作数据库需要特定的数据库语法，熟悉他们能够快速、高效地筛选出想要的结果。\n\n\n\n","source":"_posts/App 开发者学习使用 MySQL.md","raw":"---\ntitle: App 开发者学习使用 MySQL\ndate: 2018-05-13 14:50:00\ntags: MySQL\n---\n\n软件开发中除了前端页面的展示和后台服务的运行外，还有很重要的一部分就是数据存储。在数据存储方面，处于领头地位的两位是 Oracle 和 IBM。后者主要是针对银行、军队、政府或者大企业；后者除了提供大型服务器服务外，还有一些小型服务器，其中就包括 MySQL。MySQL 原来是 Sun 公司旗下的开源产品，后来 Sun 公司被 Oracle收购，MySQL 也成为了 Oracle 的一部分。MySQL 以其轻量级特点能够很方便地运行在个人 PC 上，因此是我们开发者学习数据库技术的首选产品。\n\n数据库服务器中可以创建多个数据库，其中每一个数据库中包含多张表，每一张表中包含多条数据。可以将服务器看做自己的电脑，一个数据库看做一个 Excel 文件，而一条数据就存储在一个 Excel 文件中的一行里面。\n\n#####1 安装\n[MySQL 官网](https://downloads.mysql.com/archives/community/) 下载适合自己电脑的产品。我使用的是 Mac , 因此我下载如下安装包：\n![MySQL](https://upload-images.jianshu.io/upload_images/1753235-78e412a984168a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nTips: 下载时需要个人注册 Oracle 的账号，按照要求注册留下信息即可，不要太抵触，毕竟免费使用了人家的产品，要求留下信息也不算过分。个人亲测还没有收到服务人员的推销。\n######2 安装\nMac 安装很简单，双击 pkg 安装包后，按照引导即可。成功的标志是出现欲抬头顶球的小海豚：\n![成功](https://upload-images.jianshu.io/upload_images/1753235-685ea6daf732a56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n默认安装的目录为：`usr/local/mysql`，如果想要在终端使用 mysql 命令，在 Mac 上需要设置如下环境变量：\n1 在终端输入：`sudo vi ~/.bash_profile`\n2 添加路径：\n```\n#mysql\n PATH=\"/usr/local/mysql安装路径/bin:${PATH}\"\n export PATH\n```\n3 在终端输入命令: `mysql`， 成功后的提示：\n`Access denied for user ...`\n######3 使用 MySQL\n常用的 MySQL 语句分为以下两大类:\n1. DML (Data Definition Language) 数据库定义语言，创建、删除更新数据库/数据表等；\n2. DQL (Data Query Language) 数据库查询语句，对数据库中的数据按条件查询结果；\n\nTips: mysql 语句不区分大小写\n\n#####数据库语句\n1.查询数据库 `show databases;`\n```\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n```\nmysql 系统创建了以上 4 个数据库，它们是 mysql 正常工作的基础配置，不要修改或者删除。\n\n2.创建数据库 `create database 数据库名 character set 数据库字符类型 collate 数据库校验规则;`\n使用命令`show character set;`能够查看 mysql 支持的字符类型：\n```\n+----------+---------------------------------+---------------------+--------+\n| Charset  | Description                     | Default collation   | Maxlen |\n+----------+---------------------------------+---------------------+--------+\n| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |\n| ascii    | US ASCII                        | ascii_general_ci    |      1 |\n| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |\n| binary   | Binary pseudo charset           | binary              |      1 |\n| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |\n| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |\n| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |\n| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |\n| cp850    | DOS West European               | cp850_general_ci    |      1 |\n| cp852    | DOS Central European            | cp852_general_ci    |      1 |\n| cp866    | DOS Russian                     | cp866_general_ci    |      1 |\n| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |\n```\n使用 `show collation like 'utf8%';` 能够看到utf8 字符类型的校验规则：\n```\n| utf8_estonian_ci           | utf8    | 198 |         | Yes      |       8 | PAD SPACE     |\n| utf8_general_ci            | utf8    |  33 | Yes     | Yes      |       1 | PAD SPACE     |\n| utf8_general_mysql500_ci   | utf8    | 223 |         | Yes      |       1 | PAD SPACE     |\n| utf8_german2_ci            | utf8    | 212 |         | Yes      |       8 | PAD SPACE     |\n| utf8_hungarian_ci          | utf8    | 210 |         | Yes      |       8 | PAD SPACE     |\n| utf8_icelandic_ci          | utf8    | 193 |         | Yes      |       8 | PAD SPACE     |\n| utf8_latvian_ci            | utf8    | 194 |         | Yes      |       8 | PAD SPACE     |\n| utf8_lithuanian_ci         | utf8    | 204 |         | Yes      |       8 | PAD SPACE     |\n| utf8_persian_ci            | utf8    | 208 |         | Yes      |       8 | PAD SPACE     |\n```\n默认的校验规则为：`utf8_general_ci`;\n创建数据库可以使用以下 3 种语句：\n```\ncreate database mydb1;\ncreate database mydb2 character set utf8;\ncreate database mydb3 character set utf8 collate utf8_general_ci;\n```\n其中前两种是最后一种的简写形式，最后一种能够指定特定的字符类型和校验规则。\n利用命令 `show create database mydb2;` 可以查看 mysql 系统内部创建数据库的语句。下面以 `mydb` 开头的均表示自定义数据库名；\n```\n+----------+----------------------------------------------------------------------------------------------+\n| Database | Create Database                                                                              |\n+----------+----------------------------------------------------------------------------------------------+\n| mydb2    | CREATE DATABASE `mydb2` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ |\n+----------+----------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n3.删除数据库 `drop database mydb1;`\n4.修改数据库 `alter database 数据库名称 更改信息；`\n比如，将数据库字符类型改为 gbk 编码：\n`alter database mysqlite2 character set gbk;`\n5.切换数据库：`use 数据库名称；`\n6.查看当前使用的数据库 `select database();`\n\n#####数据表语句\n1. 创建表\n```\ncreate table tabel_name\n(\n\tfielld1 datatype,\n\tfield2 datatype,\n\tfield3 datatype\n)character set 字符集 collate 校对规则；\n```\n其中：field 表示字段；datatype 表示字段类型，可以理解成 Excel 表中列的名称；\nmysql 中字段的类型，可以类比 java 学习，二者的对应关系如下：\n![类型对比1](https://upload-images.jianshu.io/upload_images/1753235-375f3088907a3ec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![类型对比2](https://upload-images.jianshu.io/upload_images/1753235-6c84bd09aceac036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nmysql 中也有存储大数据的类型：\nBLOB(字节流)、TEXT(字符流) ;\n日期时间类型有：DATE、 TIME、 DATETIME、 TIMESTAMP 四种。\n其中 DATE 只表示日期；TIME 只表示时间；DATETIME 表示日期和时间；TIMESTAMP 表示时间戳，由 mysql 系统自动生成；\n\n我们可以使用如下语句创建一张员工表：\n```\ncreate table employee\n(\n\tid int,\n\tname varchar(20),\n\tgender varchar(10),\n\tbirthday date,\n\tentry_date date,\n\tjob varchar(100),\n\tsalary float,\n\tresume varchar(255)\n);\n```\n2. 查看表： `desc employee;`\n3. 查看 mysql 创建表的语句：`show create table employee;`\n4. 通过对表中字段定义约束，可以保证数据表的有效性和完整性。约束有以下 3 种类型：\n  1 primary key：定义主键约束， 不允许为空，不允许重复；\n  2 unique：唯一约束，不允许重复；\n  3 not null：非空约束，不允许为空；\n\n比如对 employee 表进行如下约束：\n```\ncreate table employee2\n(\n\tid int primary key auto_increment,\n\tname varchar(20) not null,\n\tgender varchar(10) not null,\n\tbirthday date,\n\tentry_date date,\n\tjob varchar(100),\n\tsalary float  not null,\n\tresume varchar(255)\n);\n```\n将 id 字段作为主键，对 name/gender/resume 字段进行非空限定；\n\n5.修改表\n1. 增加列：\n  alter table 表名 add 列字段 字段类型；\n2. 修改列类型：\n  alter table 表名 modify 列字段 字段类型；\n3. 删除列：\n  alter table 表名 drop 列字段；\n4. 修改表名称：\n  rename table 表名 to 新表名；\n5. 修改列名称：\n  alter table 表名 change [column] 旧列名 新列名 类型;\n6. 修改表字符集：\n  alter table 表名 character set utf8;\n\n6.添加表数据\n增加表数据有以下 3 种语句：\n```\n1 insert into users (id, username, birthday,entry_date,job,salary,resume,image) values(1,'juxin','1995-09-09','2016-01-01','ceo',15000,'good girl','not upload');\n2 insert into users (id, username,entry_date,job,salary,resume,image) values(2,'xueyang','2016-01-01','ceo',15000,'good girl','not upload');\n3 insert into users values(3,'yanhong','1995-09-09','2016-01-01','ceo',15000,'good girl','not upload');\n```\n其中 1、2 两种方法要求前后两个括号内的字段名和字段值一一对应；最后一种方法省略字段名，但是字段值需要和定义的表 employee 一一对应；\n7.修改表数据\nupdate 表名 set 列名=列值，列名=列值，列名=列值 where 从句；\n比如修改 employ 表中 name 为 lisi 的 job 为 CEO，语句如下：\n`update employ set name='CEO' where username='lisi';`\n8.删除表数据 `delete from employ where name='CEO'; `\n9.查询表数据\nselect [DISTINCT]  column1 expression, column2 expression… from 表名；\n比如：\n查看表 employ 中所有数据：`select * from employ;`\n将表 employ 中所有数据 salary 增加 1000：\n`select name, salary+1000 from employ;`\n将表 employ 中所有 name 变为姓名:\n`select name as 姓名 from employ;`\n将表 employ 中所有 name 为 lisi 的数据选出:\n`select * from employ where name='lisi';`\n10.where 语句修饰符\n\n| 比较运算符        | 含义          |\n| ------------- |:-----|\n|> < <= >= = <>      | 大于/小于/大于等于/小于等于/不等于\n| between … and      | 某一区间（包括边界值）    \n| in(100,200) | 是否是列表中值\n| like  |  模糊查询\n| is null   |   是否为空\n| 逻辑运算符        |  and/or/not        |\n\n比如，我们创建数据表 exams 记录考试成绩：\n```\ncreate table exams(\n     id int,\n     name varchar(30),\n     chinese double,\n     english double,\n     math double\n);\n\ninsert into exams values(1,'zhangsan',100,100,100);\ninsert into exams values(2,'lisi',100,100,99);\ninsert into exams values(3,'wang ',100,100,90);\ninsert into exams values(4,'wang ',80,80,60);\ninsert into exams values(4,'wang2 ',80,70,60);\n```\n查询英语成绩在 [80,100] 的同学：\n`select * from exams where english between 80 and 100;`\n也可以使用逻辑运算符实现：\n`select * from exams  where english>=80 and english<=100;`\n查询名字中包含`wang`的同学：\n`select * from exams where name like '%wang%';` \n%：通配符; \n_:  一个字符；\n查询名字中为`wang2`的同学可以使用：\n`select * from exams where name like 'wang_';` \n11.查询结果修饰符\n| 修饰符      | 含义                  |\n| -------- | :------------------ |\n| order by | 排序 （desc 降序/asc 升序） |\n| count    | 行数求和                |\n| sum      | 列求和                 |\n| avg      | 列平均                 |\n| max/min  | 列最值                 |\n| group    | 列分组                 |\n比如：\n按照总分成绩升序排列：`select * from exams order by chinese+english+math asc;`\n查找数学成绩大于100的同学总数：`select count(*) from exams where math>=100;`\n计算各科总分：\n`select sum(chinese),sum(english),sum(math) from exams;`\n计算语文平均分：\n`select avg(chinese) from exams;`\n也可以使用：\n`select sum(chinese)/count(*) from exams;`\n查找语文最高分：\n`select max(chinese) from exams;`\n按照名字对同学进行分组：\n`select name,sum(chinese+math) from exams group by name;`\ngroup 后可以跟 having 关键字对分组进行再次筛选：\n`select name,sum(chinese+math) from exams group by name having sum(chinese+math>100);`\n\n#####总结\nMySQL 是一款轻量级的数据库软件，使用它可以在在自己电脑搭建数据库，模拟数据库的创建、销毁，数据表的创建、销毁、修改，以及数据的增删改查。操作数据库需要特定的数据库语法，熟悉他们能够快速、高效地筛选出想要的结果。\n\n\n\n","slug":"App 开发者学习使用 MySQL","published":1,"updated":"2018-05-13T06:51:12.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4gp6oz0000s8clh6xgz5rn","content":"<p>软件开发中除了前端页面的展示和后台服务的运行外，还有很重要的一部分就是数据存储。在数据存储方面，处于领头地位的两位是 Oracle 和 IBM。后者主要是针对银行、军队、政府或者大企业；后者除了提供大型服务器服务外，还有一些小型服务器，其中就包括 MySQL。MySQL 原来是 Sun 公司旗下的开源产品，后来 Sun 公司被 Oracle收购，MySQL 也成为了 Oracle 的一部分。MySQL 以其轻量级特点能够很方便地运行在个人 PC 上，因此是我们开发者学习数据库技术的首选产品。</p>\n<p>数据库服务器中可以创建多个数据库，其中每一个数据库中包含多张表，每一张表中包含多条数据。可以将服务器看做自己的电脑，一个数据库看做一个 Excel 文件，而一条数据就存储在一个 Excel 文件中的一行里面。</p>\n<p>#####1 安装<br><a href=\"https://downloads.mysql.com/archives/community/\" target=\"_blank\" rel=\"noopener\">MySQL 官网</a> 下载适合自己电脑的产品。我使用的是 Mac , 因此我下载如下安装包：<br><img src=\"https://upload-images.jianshu.io/upload_images/1753235-78e412a984168a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MySQL\"><br>Tips: 下载时需要个人注册 Oracle 的账号，按照要求注册留下信息即可，不要太抵触，毕竟免费使用了人家的产品，要求留下信息也不算过分。个人亲测还没有收到服务人员的推销。</p>\n<p>######2 安装<br>Mac 安装很简单，双击 pkg 安装包后，按照引导即可。成功的标志是出现欲抬头顶球的小海豚：<br><img src=\"https://upload-images.jianshu.io/upload_images/1753235-685ea6daf732a56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"成功\"><br>默认安装的目录为：<code>usr/local/mysql</code>，如果想要在终端使用 mysql 命令，在 Mac 上需要设置如下环境变量：<br>1 在终端输入：<code>sudo vi ~/.bash_profile</code><br>2 添加路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mysql</span><br><span class=\"line\"> PATH=&quot;/usr/local/mysql安装路径/bin:$&#123;PATH&#125;&quot;</span><br><span class=\"line\"> export PATH</span><br></pre></td></tr></table></figure></p>\n<p>3 在终端输入命令: <code>mysql</code>， 成功后的提示：<br><code>Access denied for user ...</code></p>\n<p>######3 使用 MySQL<br>常用的 MySQL 语句分为以下两大类:</p>\n<ol>\n<li>DML (Data Definition Language) 数据库定义语言，创建、删除更新数据库/数据表等；</li>\n<li>DQL (Data Query Language) 数据库查询语句，对数据库中的数据按条件查询结果；</li>\n</ol>\n<p>Tips: mysql 语句不区分大小写</p>\n<p>#####数据库语句<br>1.查询数据库 <code>show databases;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sys                |</span><br></pre></td></tr></table></figure></p>\n<p>mysql 系统创建了以上 4 个数据库，它们是 mysql 正常工作的基础配置，不要修改或者删除。</p>\n<p>2.创建数据库 <code>create database 数据库名 character set 数据库字符类型 collate 数据库校验规则;</code><br>使用命令<code>show character set;</code>能够查看 mysql 支持的字符类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------+---------------------------------+---------------------+--------+</span><br><span class=\"line\">| Charset  | Description                     | Default collation   | Maxlen |</span><br><span class=\"line\">+----------+---------------------------------+---------------------+--------+</span><br><span class=\"line\">| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |</span><br><span class=\"line\">| ascii    | US ASCII                        | ascii_general_ci    |      1 |</span><br><span class=\"line\">| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |</span><br><span class=\"line\">| binary   | Binary pseudo charset           | binary              |      1 |</span><br><span class=\"line\">| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |</span><br><span class=\"line\">| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |</span><br><span class=\"line\">| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |</span><br><span class=\"line\">| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |</span><br><span class=\"line\">| cp850    | DOS West European               | cp850_general_ci    |      1 |</span><br><span class=\"line\">| cp852    | DOS Central European            | cp852_general_ci    |      1 |</span><br><span class=\"line\">| cp866    | DOS Russian                     | cp866_general_ci    |      1 |</span><br><span class=\"line\">| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>show collation like &#39;utf8%&#39;;</code> 能够看到utf8 字符类型的校验规则：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| utf8_estonian_ci           | utf8    | 198 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_general_ci            | utf8    |  33 | Yes     | Yes      |       1 | PAD SPACE     |</span><br><span class=\"line\">| utf8_general_mysql500_ci   | utf8    | 223 |         | Yes      |       1 | PAD SPACE     |</span><br><span class=\"line\">| utf8_german2_ci            | utf8    | 212 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_hungarian_ci          | utf8    | 210 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_icelandic_ci          | utf8    | 193 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_latvian_ci            | utf8    | 194 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_lithuanian_ci         | utf8    | 204 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_persian_ci            | utf8    | 208 |         | Yes      |       8 | PAD SPACE     |</span><br></pre></td></tr></table></figure></p>\n<p>默认的校验规则为：<code>utf8_general_ci</code>;<br>创建数据库可以使用以下 3 种语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database mydb1;</span><br><span class=\"line\">create database mydb2 character set utf8;</span><br><span class=\"line\">create database mydb3 character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure></p>\n<p>其中前两种是最后一种的简写形式，最后一种能够指定特定的字符类型和校验规则。<br>利用命令 <code>show create database mydb2;</code> 可以查看 mysql 系统内部创建数据库的语句。下面以 <code>mydb</code> 开头的均表示自定义数据库名；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------+----------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Database | Create Database                                                                              |</span><br><span class=\"line\">+----------+----------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| mydb2    | CREATE DATABASE `mydb2` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ |</span><br><span class=\"line\">+----------+----------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>3.删除数据库 <code>drop database mydb1;</code><br>4.修改数据库 <code>alter database 数据库名称 更改信息；</code><br>比如，将数据库字符类型改为 gbk 编码：<br><code>alter database mysqlite2 character set gbk;</code><br>5.切换数据库：<code>use 数据库名称；</code><br>6.查看当前使用的数据库 <code>select database();</code></p>\n<p>#####数据表语句</p>\n<ol>\n<li>创建表<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table tabel_name</span><br><span class=\"line\">(</span><br><span class=\"line\">\tfielld1 datatype,</span><br><span class=\"line\">\tfield2 datatype,</span><br><span class=\"line\">\tfield3 datatype</span><br><span class=\"line\">)character set 字符集 collate 校对规则；</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中：field 表示字段；datatype 表示字段类型，可以理解成 Excel 表中列的名称；<br>mysql 中字段的类型，可以类比 java 学习，二者的对应关系如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/1753235-375f3088907a3ec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"类型对比1\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1753235-6c84bd09aceac036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"类型对比2\"><br>mysql 中也有存储大数据的类型：<br>BLOB(字节流)、TEXT(字符流) ;<br>日期时间类型有：DATE、 TIME、 DATETIME、 TIMESTAMP 四种。<br>其中 DATE 只表示日期；TIME 只表示时间；DATETIME 表示日期和时间；TIMESTAMP 表示时间戳，由 mysql 系统自动生成；</p>\n<p>我们可以使用如下语句创建一张员工表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table employee</span><br><span class=\"line\">(</span><br><span class=\"line\">\tid int,</span><br><span class=\"line\">\tname varchar(20),</span><br><span class=\"line\">\tgender varchar(10),</span><br><span class=\"line\">\tbirthday date,</span><br><span class=\"line\">\tentry_date date,</span><br><span class=\"line\">\tjob varchar(100),</span><br><span class=\"line\">\tsalary float,</span><br><span class=\"line\">\tresume varchar(255)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>查看表： <code>desc employee;</code></li>\n<li>查看 mysql 创建表的语句：<code>show create table employee;</code></li>\n<li>通过对表中字段定义约束，可以保证数据表的有效性和完整性。约束有以下 3 种类型：<br>1 primary key：定义主键约束， 不允许为空，不允许重复；<br>2 unique：唯一约束，不允许重复；<br>3 not null：非空约束，不允许为空；</li>\n</ol>\n<p>比如对 employee 表进行如下约束：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table employee2</span><br><span class=\"line\">(</span><br><span class=\"line\">\tid int primary key auto_increment,</span><br><span class=\"line\">\tname varchar(20) not null,</span><br><span class=\"line\">\tgender varchar(10) not null,</span><br><span class=\"line\">\tbirthday date,</span><br><span class=\"line\">\tentry_date date,</span><br><span class=\"line\">\tjob varchar(100),</span><br><span class=\"line\">\tsalary float  not null,</span><br><span class=\"line\">\tresume varchar(255)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>将 id 字段作为主键，对 name/gender/resume 字段进行非空限定；</p>\n<p>5.修改表</p>\n<ol>\n<li>增加列：<br>alter table 表名 add 列字段 字段类型；</li>\n<li>修改列类型：<br>alter table 表名 modify 列字段 字段类型；</li>\n<li>删除列：<br>alter table 表名 drop 列字段；</li>\n<li>修改表名称：<br>rename table 表名 to 新表名；</li>\n<li>修改列名称：<br>alter table 表名 change [column] 旧列名 新列名 类型;</li>\n<li>修改表字符集：<br>alter table 表名 character set utf8;</li>\n</ol>\n<p>6.添加表数据<br>增加表数据有以下 3 种语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 insert into users (id, username, birthday,entry_date,job,salary,resume,image) values(1,&apos;juxin&apos;,&apos;1995-09-09&apos;,&apos;2016-01-01&apos;,&apos;ceo&apos;,15000,&apos;good girl&apos;,&apos;not upload&apos;);</span><br><span class=\"line\">2 insert into users (id, username,entry_date,job,salary,resume,image) values(2,&apos;xueyang&apos;,&apos;2016-01-01&apos;,&apos;ceo&apos;,15000,&apos;good girl&apos;,&apos;not upload&apos;);</span><br><span class=\"line\">3 insert into users values(3,&apos;yanhong&apos;,&apos;1995-09-09&apos;,&apos;2016-01-01&apos;,&apos;ceo&apos;,15000,&apos;good girl&apos;,&apos;not upload&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>其中 1、2 两种方法要求前后两个括号内的字段名和字段值一一对应；最后一种方法省略字段名，但是字段值需要和定义的表 employee 一一对应；<br>7.修改表数据<br>update 表名 set 列名=列值，列名=列值，列名=列值 where 从句；<br>比如修改 employ 表中 name 为 lisi 的 job 为 CEO，语句如下：<br><code>update employ set name=&#39;CEO&#39; where username=&#39;lisi&#39;;</code><br>8.删除表数据 <code>delete from employ where name=&#39;CEO&#39;;</code><br>9.查询表数据<br>select [DISTINCT]  column1 expression, column2 expression… from 表名；<br>比如：<br>查看表 employ 中所有数据：<code>select * from employ;</code><br>将表 employ 中所有数据 salary 增加 1000：<br><code>select name, salary+1000 from employ;</code><br>将表 employ 中所有 name 变为姓名:<br><code>select name as 姓名 from employ;</code><br>将表 employ 中所有 name 为 lisi 的数据选出:<br><code>select * from employ where name=&#39;lisi&#39;;</code><br>10.where 语句修饰符</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt; &lt; &lt;= &gt;= = &lt;&gt;</td>\n<td style=\"text-align:left\">大于/小于/大于等于/小于等于/不等于</td>\n</tr>\n<tr>\n<td>between … and</td>\n<td style=\"text-align:left\">某一区间（包括边界值）    </td>\n</tr>\n<tr>\n<td>in(100,200)</td>\n<td style=\"text-align:left\">是否是列表中值</td>\n</tr>\n<tr>\n<td>like</td>\n<td style=\"text-align:left\">模糊查询</td>\n</tr>\n<tr>\n<td>is null</td>\n<td style=\"text-align:left\">是否为空</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td style=\"text-align:left\">and/or/not</td>\n</tr>\n</tbody>\n</table>\n<p>比如，我们创建数据表 exams 记录考试成绩：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table exams(</span><br><span class=\"line\">     id int,</span><br><span class=\"line\">     name varchar(30),</span><br><span class=\"line\">     chinese double,</span><br><span class=\"line\">     english double,</span><br><span class=\"line\">     math double</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">insert into exams values(1,&apos;zhangsan&apos;,100,100,100);</span><br><span class=\"line\">insert into exams values(2,&apos;lisi&apos;,100,100,99);</span><br><span class=\"line\">insert into exams values(3,&apos;wang &apos;,100,100,90);</span><br><span class=\"line\">insert into exams values(4,&apos;wang &apos;,80,80,60);</span><br><span class=\"line\">insert into exams values(4,&apos;wang2 &apos;,80,70,60);</span><br></pre></td></tr></table></figure></p>\n<p>查询英语成绩在 [80,100] 的同学：<br><code>select * from exams where english between 80 and 100;</code><br>也可以使用逻辑运算符实现：<br><code>select * from exams  where english&gt;=80 and english&lt;=100;</code><br>查询名字中包含<code>wang</code>的同学：<br><code>select * from exams where name like &#39;%wang%&#39;;</code><br>%：通配符;<br><em>:  一个字符；<br>查询名字中为<code>wang2</code>的同学可以使用：<br>`select * from exams where name like ‘wang</em>‘;<code>11.查询结果修饰符\n| 修饰符      | 含义                  |\n| -------- | :------------------ |\n| order by | 排序 （desc 降序/asc 升序） |\n| count    | 行数求和                |\n| sum      | 列求和                 |\n| avg      | 列平均                 |\n| max/min  | 列最值                 |\n| group    | 列分组                 |\n比如：\n按照总分成绩升序排列：</code>select <em> from exams order by chinese+english+math asc;<code>查找数学成绩大于100的同学总数：</code>select count(</em>) from exams where math&gt;=100;<code>计算各科总分：</code>select sum(chinese),sum(english),sum(math) from exams;<code>计算语文平均分：</code>select avg(chinese) from exams;<code>也可以使用：</code>select sum(chinese)/count(*) from exams;<code>查找语文最高分：</code>select max(chinese) from exams;<code>按照名字对同学进行分组：</code>select name,sum(chinese+math) from exams group by name;<code>group 后可以跟 having 关键字对分组进行再次筛选：</code>select name,sum(chinese+math) from exams group by name having sum(chinese+math&gt;100);`</p>\n<p>#####总结<br>MySQL 是一款轻量级的数据库软件，使用它可以在在自己电脑搭建数据库，模拟数据库的创建、销毁，数据表的创建、销毁、修改，以及数据的增删改查。操作数据库需要特定的数据库语法，熟悉他们能够快速、高效地筛选出想要的结果。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>软件开发中除了前端页面的展示和后台服务的运行外，还有很重要的一部分就是数据存储。在数据存储方面，处于领头地位的两位是 Oracle 和 IBM。后者主要是针对银行、军队、政府或者大企业；后者除了提供大型服务器服务外，还有一些小型服务器，其中就包括 MySQL。MySQL 原来是 Sun 公司旗下的开源产品，后来 Sun 公司被 Oracle收购，MySQL 也成为了 Oracle 的一部分。MySQL 以其轻量级特点能够很方便地运行在个人 PC 上，因此是我们开发者学习数据库技术的首选产品。</p>\n<p>数据库服务器中可以创建多个数据库，其中每一个数据库中包含多张表，每一张表中包含多条数据。可以将服务器看做自己的电脑，一个数据库看做一个 Excel 文件，而一条数据就存储在一个 Excel 文件中的一行里面。</p>\n<p>#####1 安装<br><a href=\"https://downloads.mysql.com/archives/community/\" target=\"_blank\" rel=\"noopener\">MySQL 官网</a> 下载适合自己电脑的产品。我使用的是 Mac , 因此我下载如下安装包：<br><img src=\"https://upload-images.jianshu.io/upload_images/1753235-78e412a984168a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MySQL\"><br>Tips: 下载时需要个人注册 Oracle 的账号，按照要求注册留下信息即可，不要太抵触，毕竟免费使用了人家的产品，要求留下信息也不算过分。个人亲测还没有收到服务人员的推销。</p>\n<p>######2 安装<br>Mac 安装很简单，双击 pkg 安装包后，按照引导即可。成功的标志是出现欲抬头顶球的小海豚：<br><img src=\"https://upload-images.jianshu.io/upload_images/1753235-685ea6daf732a56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"成功\"><br>默认安装的目录为：<code>usr/local/mysql</code>，如果想要在终端使用 mysql 命令，在 Mac 上需要设置如下环境变量：<br>1 在终端输入：<code>sudo vi ~/.bash_profile</code><br>2 添加路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mysql</span><br><span class=\"line\"> PATH=&quot;/usr/local/mysql安装路径/bin:$&#123;PATH&#125;&quot;</span><br><span class=\"line\"> export PATH</span><br></pre></td></tr></table></figure></p>\n<p>3 在终端输入命令: <code>mysql</code>， 成功后的提示：<br><code>Access denied for user ...</code></p>\n<p>######3 使用 MySQL<br>常用的 MySQL 语句分为以下两大类:</p>\n<ol>\n<li>DML (Data Definition Language) 数据库定义语言，创建、删除更新数据库/数据表等；</li>\n<li>DQL (Data Query Language) 数据库查询语句，对数据库中的数据按条件查询结果；</li>\n</ol>\n<p>Tips: mysql 语句不区分大小写</p>\n<p>#####数据库语句<br>1.查询数据库 <code>show databases;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sys                |</span><br></pre></td></tr></table></figure></p>\n<p>mysql 系统创建了以上 4 个数据库，它们是 mysql 正常工作的基础配置，不要修改或者删除。</p>\n<p>2.创建数据库 <code>create database 数据库名 character set 数据库字符类型 collate 数据库校验规则;</code><br>使用命令<code>show character set;</code>能够查看 mysql 支持的字符类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------+---------------------------------+---------------------+--------+</span><br><span class=\"line\">| Charset  | Description                     | Default collation   | Maxlen |</span><br><span class=\"line\">+----------+---------------------------------+---------------------+--------+</span><br><span class=\"line\">| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |</span><br><span class=\"line\">| ascii    | US ASCII                        | ascii_general_ci    |      1 |</span><br><span class=\"line\">| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |</span><br><span class=\"line\">| binary   | Binary pseudo charset           | binary              |      1 |</span><br><span class=\"line\">| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |</span><br><span class=\"line\">| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |</span><br><span class=\"line\">| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |</span><br><span class=\"line\">| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |</span><br><span class=\"line\">| cp850    | DOS West European               | cp850_general_ci    |      1 |</span><br><span class=\"line\">| cp852    | DOS Central European            | cp852_general_ci    |      1 |</span><br><span class=\"line\">| cp866    | DOS Russian                     | cp866_general_ci    |      1 |</span><br><span class=\"line\">| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>show collation like &#39;utf8%&#39;;</code> 能够看到utf8 字符类型的校验规则：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| utf8_estonian_ci           | utf8    | 198 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_general_ci            | utf8    |  33 | Yes     | Yes      |       1 | PAD SPACE     |</span><br><span class=\"line\">| utf8_general_mysql500_ci   | utf8    | 223 |         | Yes      |       1 | PAD SPACE     |</span><br><span class=\"line\">| utf8_german2_ci            | utf8    | 212 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_hungarian_ci          | utf8    | 210 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_icelandic_ci          | utf8    | 193 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_latvian_ci            | utf8    | 194 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_lithuanian_ci         | utf8    | 204 |         | Yes      |       8 | PAD SPACE     |</span><br><span class=\"line\">| utf8_persian_ci            | utf8    | 208 |         | Yes      |       8 | PAD SPACE     |</span><br></pre></td></tr></table></figure></p>\n<p>默认的校验规则为：<code>utf8_general_ci</code>;<br>创建数据库可以使用以下 3 种语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database mydb1;</span><br><span class=\"line\">create database mydb2 character set utf8;</span><br><span class=\"line\">create database mydb3 character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure></p>\n<p>其中前两种是最后一种的简写形式，最后一种能够指定特定的字符类型和校验规则。<br>利用命令 <code>show create database mydb2;</code> 可以查看 mysql 系统内部创建数据库的语句。下面以 <code>mydb</code> 开头的均表示自定义数据库名；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------+----------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Database | Create Database                                                                              |</span><br><span class=\"line\">+----------+----------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| mydb2    | CREATE DATABASE `mydb2` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ |</span><br><span class=\"line\">+----------+----------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>3.删除数据库 <code>drop database mydb1;</code><br>4.修改数据库 <code>alter database 数据库名称 更改信息；</code><br>比如，将数据库字符类型改为 gbk 编码：<br><code>alter database mysqlite2 character set gbk;</code><br>5.切换数据库：<code>use 数据库名称；</code><br>6.查看当前使用的数据库 <code>select database();</code></p>\n<p>#####数据表语句</p>\n<ol>\n<li>创建表<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table tabel_name</span><br><span class=\"line\">(</span><br><span class=\"line\">\tfielld1 datatype,</span><br><span class=\"line\">\tfield2 datatype,</span><br><span class=\"line\">\tfield3 datatype</span><br><span class=\"line\">)character set 字符集 collate 校对规则；</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中：field 表示字段；datatype 表示字段类型，可以理解成 Excel 表中列的名称；<br>mysql 中字段的类型，可以类比 java 学习，二者的对应关系如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/1753235-375f3088907a3ec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"类型对比1\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1753235-6c84bd09aceac036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"类型对比2\"><br>mysql 中也有存储大数据的类型：<br>BLOB(字节流)、TEXT(字符流) ;<br>日期时间类型有：DATE、 TIME、 DATETIME、 TIMESTAMP 四种。<br>其中 DATE 只表示日期；TIME 只表示时间；DATETIME 表示日期和时间；TIMESTAMP 表示时间戳，由 mysql 系统自动生成；</p>\n<p>我们可以使用如下语句创建一张员工表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table employee</span><br><span class=\"line\">(</span><br><span class=\"line\">\tid int,</span><br><span class=\"line\">\tname varchar(20),</span><br><span class=\"line\">\tgender varchar(10),</span><br><span class=\"line\">\tbirthday date,</span><br><span class=\"line\">\tentry_date date,</span><br><span class=\"line\">\tjob varchar(100),</span><br><span class=\"line\">\tsalary float,</span><br><span class=\"line\">\tresume varchar(255)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>查看表： <code>desc employee;</code></li>\n<li>查看 mysql 创建表的语句：<code>show create table employee;</code></li>\n<li>通过对表中字段定义约束，可以保证数据表的有效性和完整性。约束有以下 3 种类型：<br>1 primary key：定义主键约束， 不允许为空，不允许重复；<br>2 unique：唯一约束，不允许重复；<br>3 not null：非空约束，不允许为空；</li>\n</ol>\n<p>比如对 employee 表进行如下约束：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table employee2</span><br><span class=\"line\">(</span><br><span class=\"line\">\tid int primary key auto_increment,</span><br><span class=\"line\">\tname varchar(20) not null,</span><br><span class=\"line\">\tgender varchar(10) not null,</span><br><span class=\"line\">\tbirthday date,</span><br><span class=\"line\">\tentry_date date,</span><br><span class=\"line\">\tjob varchar(100),</span><br><span class=\"line\">\tsalary float  not null,</span><br><span class=\"line\">\tresume varchar(255)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>将 id 字段作为主键，对 name/gender/resume 字段进行非空限定；</p>\n<p>5.修改表</p>\n<ol>\n<li>增加列：<br>alter table 表名 add 列字段 字段类型；</li>\n<li>修改列类型：<br>alter table 表名 modify 列字段 字段类型；</li>\n<li>删除列：<br>alter table 表名 drop 列字段；</li>\n<li>修改表名称：<br>rename table 表名 to 新表名；</li>\n<li>修改列名称：<br>alter table 表名 change [column] 旧列名 新列名 类型;</li>\n<li>修改表字符集：<br>alter table 表名 character set utf8;</li>\n</ol>\n<p>6.添加表数据<br>增加表数据有以下 3 种语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 insert into users (id, username, birthday,entry_date,job,salary,resume,image) values(1,&apos;juxin&apos;,&apos;1995-09-09&apos;,&apos;2016-01-01&apos;,&apos;ceo&apos;,15000,&apos;good girl&apos;,&apos;not upload&apos;);</span><br><span class=\"line\">2 insert into users (id, username,entry_date,job,salary,resume,image) values(2,&apos;xueyang&apos;,&apos;2016-01-01&apos;,&apos;ceo&apos;,15000,&apos;good girl&apos;,&apos;not upload&apos;);</span><br><span class=\"line\">3 insert into users values(3,&apos;yanhong&apos;,&apos;1995-09-09&apos;,&apos;2016-01-01&apos;,&apos;ceo&apos;,15000,&apos;good girl&apos;,&apos;not upload&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>其中 1、2 两种方法要求前后两个括号内的字段名和字段值一一对应；最后一种方法省略字段名，但是字段值需要和定义的表 employee 一一对应；<br>7.修改表数据<br>update 表名 set 列名=列值，列名=列值，列名=列值 where 从句；<br>比如修改 employ 表中 name 为 lisi 的 job 为 CEO，语句如下：<br><code>update employ set name=&#39;CEO&#39; where username=&#39;lisi&#39;;</code><br>8.删除表数据 <code>delete from employ where name=&#39;CEO&#39;;</code><br>9.查询表数据<br>select [DISTINCT]  column1 expression, column2 expression… from 表名；<br>比如：<br>查看表 employ 中所有数据：<code>select * from employ;</code><br>将表 employ 中所有数据 salary 增加 1000：<br><code>select name, salary+1000 from employ;</code><br>将表 employ 中所有 name 变为姓名:<br><code>select name as 姓名 from employ;</code><br>将表 employ 中所有 name 为 lisi 的数据选出:<br><code>select * from employ where name=&#39;lisi&#39;;</code><br>10.where 语句修饰符</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt; &lt; &lt;= &gt;= = &lt;&gt;</td>\n<td style=\"text-align:left\">大于/小于/大于等于/小于等于/不等于</td>\n</tr>\n<tr>\n<td>between … and</td>\n<td style=\"text-align:left\">某一区间（包括边界值）    </td>\n</tr>\n<tr>\n<td>in(100,200)</td>\n<td style=\"text-align:left\">是否是列表中值</td>\n</tr>\n<tr>\n<td>like</td>\n<td style=\"text-align:left\">模糊查询</td>\n</tr>\n<tr>\n<td>is null</td>\n<td style=\"text-align:left\">是否为空</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td style=\"text-align:left\">and/or/not</td>\n</tr>\n</tbody>\n</table>\n<p>比如，我们创建数据表 exams 记录考试成绩：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table exams(</span><br><span class=\"line\">     id int,</span><br><span class=\"line\">     name varchar(30),</span><br><span class=\"line\">     chinese double,</span><br><span class=\"line\">     english double,</span><br><span class=\"line\">     math double</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">insert into exams values(1,&apos;zhangsan&apos;,100,100,100);</span><br><span class=\"line\">insert into exams values(2,&apos;lisi&apos;,100,100,99);</span><br><span class=\"line\">insert into exams values(3,&apos;wang &apos;,100,100,90);</span><br><span class=\"line\">insert into exams values(4,&apos;wang &apos;,80,80,60);</span><br><span class=\"line\">insert into exams values(4,&apos;wang2 &apos;,80,70,60);</span><br></pre></td></tr></table></figure></p>\n<p>查询英语成绩在 [80,100] 的同学：<br><code>select * from exams where english between 80 and 100;</code><br>也可以使用逻辑运算符实现：<br><code>select * from exams  where english&gt;=80 and english&lt;=100;</code><br>查询名字中包含<code>wang</code>的同学：<br><code>select * from exams where name like &#39;%wang%&#39;;</code><br>%：通配符;<br><em>:  一个字符；<br>查询名字中为<code>wang2</code>的同学可以使用：<br>`select * from exams where name like ‘wang</em>‘;<code>11.查询结果修饰符\n| 修饰符      | 含义                  |\n| -------- | :------------------ |\n| order by | 排序 （desc 降序/asc 升序） |\n| count    | 行数求和                |\n| sum      | 列求和                 |\n| avg      | 列平均                 |\n| max/min  | 列最值                 |\n| group    | 列分组                 |\n比如：\n按照总分成绩升序排列：</code>select <em> from exams order by chinese+english+math asc;<code>查找数学成绩大于100的同学总数：</code>select count(</em>) from exams where math&gt;=100;<code>计算各科总分：</code>select sum(chinese),sum(english),sum(math) from exams;<code>计算语文平均分：</code>select avg(chinese) from exams;<code>也可以使用：</code>select sum(chinese)/count(*) from exams;<code>查找语文最高分：</code>select max(chinese) from exams;<code>按照名字对同学进行分组：</code>select name,sum(chinese+math) from exams group by name;<code>group 后可以跟 having 关键字对分组进行再次筛选：</code>select name,sum(chinese+math) from exams group by name having sum(chinese+math&gt;100);`</p>\n<p>#####总结<br>MySQL 是一款轻量级的数据库软件，使用它可以在在自己电脑搭建数据库，模拟数据库的创建、销毁，数据表的创建、销毁、修改，以及数据的增删改查。操作数据库需要特定的数据库语法，熟悉他们能够快速、高效地筛选出想要的结果。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjda9trhq000105cl4lwt6sgx","tag_id":"cjda9trhw000405clve1cx7yx","_id":"cjda9trhy000605cloe73vwzs"},{"post_id":"cjda9trhu000305clwjuqwqfj","tag_id":"cjda9trhy000505clfezq6aaz","_id":"cjda9trhz000705clmej62ddb"},{"post_id":"cje77l3gd000007clwyn7d9vr","tag_id":"cje77l3gj000107cl424a007q","_id":"cje77l3gl000207clpmynhpof"},{"post_id":"cjh4gp6oz0000s8clh6xgz5rn","tag_id":"cjh4gp6p80001s8clgmvra8lq","_id":"cjh4gp6pa0002s8clwf9wiy4u"}],"Tag":[{"name":"GithubPages","_id":"cjda9trhw000405clve1cx7yx"},{"name":"About Blog","_id":"cjda9trhy000505clfezq6aaz"},{"name":"Apache","_id":"cje77l3gj000107cl424a007q"},{"name":"MySQL","_id":"cjh4gp6p80001s8clgmvra8lq"}]}}